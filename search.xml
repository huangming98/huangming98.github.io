<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Practical English Writing Course Notes</title>
    <url>/2024/05/25/Practical-English-Writing-Course-Notes/</url>
    <content><![CDATA[<h2 id="1-write-base"><a href="#1-write-base" class="headerlink" title="1. write base"></a>1. write base</h2><h3 id="1-1-Paragraph-analysis-and-write"><a href="#1-1-Paragraph-analysis-and-write" class="headerlink" title="1.1 Paragraph analysis and write:"></a>1.1 Paragraph analysis and write:</h3><p><strong>Topic sentence</strong>:<br>Purpose:to tell readers the main idea of the paragraph(what will be discussed); Components:topic(the general subject) + controlling idea(the specific aspect of the subject it focuses on).</p>
<p><strong>Supporting sentences</strong>: to develop the main idea; through details, facts, examples, reasons, etc. <em>unity of ideas</em>: no irrelevant sentences &amp; connectors.</p>
<p><strong>Concluding sentence</strong>: to bring the paragraph to an end restatement, summary, &amp; result <em>signal:</em> finally, thus, therefore, etc.More general than the supporting sentences.<br><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-16-59-19.png" alt></p>
<h3 id="1-2-Process-Essay-analysis-and-write"><a href="#1-2-Process-Essay-analysis-and-write" class="headerlink" title="1.2 Process Essay  analysis and write:"></a>1.2 Process Essay  analysis and write:</h3><p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-18-56-49.png" alt><br><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-18-56-36.png" alt></p>
<p><strong>Introduction</strong></p>
<ul>
<li>to introduce the topic</li>
<li>to give readers the background information </li>
<li>to <strong>catch</strong> readers’ interest</li>
</ul>
<p><strong>concluding paragraph</strong></p>
<ul>
<li><strong>Summarize</strong> the main points.</li>
<li><strong>Restate</strong> the thesis statement to emphasize the main idea.</li>
<li>Add some <strong>comments</strong>: making a predication, giving advice, or showing results of the situation/topic.</li>
<li>Do not add new information.</li>
<li>Do not review only some of the information in your essay.</li>
</ul>
<h2 id="2-sentence-skills"><a href="#2-sentence-skills" class="headerlink" title="2. sentence skills"></a>2. sentence skills</h2><h3 id="2-1-Basic-sentence-skills"><a href="#2-1-Basic-sentence-skills" class="headerlink" title="2.1 Basic sentence skills"></a>2.1 Basic sentence skills</h3><p><strong>Run-ons</strong> (标点符号不能连接两个句子，不规范，连词可以)<br>[<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>]The bus stopped suddenly，I spilled coffee all over my skirt.<br>[<span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>]The bus stopped suddenly, <strong>and</strong> I spilled coffee all over my skirt.  </p>
<p><strong>Subject-Verb agreement</strong> (主谓一致和就近原则)</p>
<ol>
<li>An old chair with broken legs (<strong>has</strong>, have) sat in our basement for years. </li>
<li>There (<strong>is</strong>, are)  a pen, two books and many pencils on the desk.</li>
<li>Not only my teachers but also my wife (encourage, <strong>encourages</strong>) me to work hard in college. </li>
<li>Neither of those websites (<strong>is</strong>,  are) credible.</li>
</ol>
<p><strong>Pronoun agreement and reference</strong></p>
<ol>
<li>Alicia showed me <strong>her</strong> antique wedding band. </li>
<li>Students enrolled in the art class must provide <strong>their</strong> own tools.</li>
<li>Kia is really a shy person, but she keeps <strong>it</strong> hidden. (refer her shyness<br>)</li>
</ol>
<p><strong>Misplaced modifiers:</strong> Words that do not describe what the  writer intended them to describe due to awkward placement(place words as close as possible to what they describe)<br>[<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>]David  couldn’t  drive to work in his small sports car with a broken leg.<br>[<span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>]With a broken leg, David couldn’t drive to work in his small sports car.</p>
<h3 id="2-2-Combining-Sentences-with-Coordinating-Conjunctions"><a href="#2-2-Combining-Sentences-with-Coordinating-Conjunctions" class="headerlink" title="2.2 Combining Sentences with Coordinating Conjunctions"></a>2.2 Combining Sentences with Coordinating Conjunctions</h3><p><u>Clause 1</u>, <em>conjunction</em> <u>clause 2</u></p>
<p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-17-27-03.png" alt></p>
<h3 id="2-3-Combining-Sentences-with-Transitions"><a href="#2-3-Combining-Sentences-with-Transitions" class="headerlink" title="2.3 Combining Sentences with Transitions"></a>2.3 Combining Sentences with Transitions</h3><p><strong>Linking transitions</strong> are words or expressions that connect independent (main) clauses together.<br><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-18-37-40.png" alt><br>eg:These people can communicate well through body language <strong>;  in addition,</strong> they have a good sense of balance and hand-eye coordination. </p>
<p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-23-18-39-44.png" alt></p>
<p><strong>Do not use a SEMICOLON if you do not have a complete clause after the linking transition.</strong><br>[<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>]Many people use a mother’s or grandmother’s cure for a cold;  for example, chicken soup. </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">sig</th>
<th style="text-align:center">english</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">comma</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">full stop/ period</td>
</tr>
<tr>
<td style="text-align:center">:</td>
<td style="text-align:center">colon</td>
</tr>
<tr>
<td style="text-align:center">;</td>
<td style="text-align:center">semi-colon</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">exclamation mark</td>
</tr>
<tr>
<td style="text-align:center">“  ”</td>
<td style="text-align:center">quotation mark</td>
</tr>
<tr>
<td style="text-align:center">X’s</td>
<td style="text-align:center">apostrophe</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">question mark</td>
</tr>
<tr>
<td style="text-align:center">w-w</td>
<td style="text-align:center">hyphen/ splash</td>
</tr>
<tr>
<td style="text-align:center">(  )</td>
<td style="text-align:center">parenthesis/ bracket</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-4-Combining-clauses-with-subordinating-conjunctions"><a href="#2-4-Combining-clauses-with-subordinating-conjunctions" class="headerlink" title="2.4 Combining clauses with subordinating conjunctions"></a>2.4 Combining clauses with subordinating conjunctions</h3><p><strong>As soon as</strong> he said that <strong>,</strong> Rosa stood up.<br>Peter almost <em>knocked</em> me down <strong>before</strong> he <em>saw</em> me.<br>| Subordinator |           Meaning            |                                 Example                                 |<br>| :—————: | :—————————————: | :——————————————————————————————————-: |<br>|    After     |          later than          |       He travelled to England <strong>after</strong> he wrote his first book.        |<br>|    Before    |         earlier than         |           Peter almost knocked me down <strong>before</strong> he saw me.            |<br>|    Until     |       up to that time        |                  Let’s wait <strong>until</strong> the rain stops.                   |<br>|    Since     |        from that time        |   I have been practicing yoga <strong>since</strong> I took a yoga course in 2020.   |<br>|    While     |       during that time       |             My father fell asleep <strong>while</strong> he was reading.             |<br>|     When     |     at/during that time      |           <strong>When</strong> he came in, I was listening to the radio.            |<br>|   Whenever   | at any time that/ every time |     You can take a short relaxation break <strong>whenever</strong> you need it.     |<br>|      As      |      immediately after       | <strong>As</strong> the president spoke, the people in the audience listened to him. |<br>|  As soon as  |                              |          The atmosphere changed <strong>as soon as</strong> Mary walked in.          |</p>
<h3 id="2-5-A-summary-of-connectors"><a href="#2-5-A-summary-of-connectors" class="headerlink" title="2.5 A summary of connectors"></a>2.5 A summary of connectors</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating additional information</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Coordinating conjunction</td>
<td style="text-align:center">and</td>
</tr>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">in addition, additionally, furthermore, moreover, also, besides</td>
</tr>
<tr>
<td style="text-align:center">Correlative conjunctions</td>
<td style="text-align:center">not only…but also</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrases</td>
<td style="text-align:center">in addition to, along with, as well as, besides, apart from</td>
</tr>
</tbody>
</table>
</div>
<p>eg1: High-level positions are stressful at times <strong>; furthermore,   (.Furthermore,)</strong> they can be harmful to your health.<br>eg2: <strong>Along with</strong> being stressful at times, high-level positions can also be harmful to your health. </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating sequence, time, and order</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">first, second, next, to start/ begin with, at the outset, at the commencement, in the first/second place, at this point, meanwhile, in the meantime, subsequently, later, then, ultimately, finally, lastly</td>
</tr>
<tr>
<td style="text-align:center">Subordinating conjunction</td>
<td style="text-align:center">before, after, until, since, while, when, whenever, as, as soon as</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrase</td>
<td style="text-align:center">in, at, on, for, during, within, from, prior to, previous to, before, after</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrases</td>
<td style="text-align:center">in addition to, along with, as well as, besides, apart from</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating cause and effect</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Coordinating conjunction</td>
<td style="text-align:center">for, so</td>
</tr>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">therefore, hence, as a result, consequently, accordingly</td>
</tr>
<tr>
<td style="text-align:center">Subordinating conjunction</td>
<td style="text-align:center">because, as, since, if (result of the condition)</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrases</td>
<td style="text-align:center">due to, because of, as a result of, owing to, on account of, for the sake of, for the purpose of, in the wake of, be the reason for, be responsible for</td>
</tr>
<tr>
<td style="text-align:center">Verbal/Noun/Adverb phrase</td>
<td style="text-align:center">contribute to, result from, cause, lead to, result in, thereby(adv)</td>
</tr>
<tr>
<td style="text-align:center">-ing clauses of result</td>
<td style="text-align:center">The carcinogenic substances are extracted from the soil, leaving the soil uncontaminated.</td>
</tr>
</tbody>
</table>
</div>
<p>eg1: We increased our prices, <strong>for</strong> the cost of materials rose sharply last year.<br>eg2: The cost of materials rose sharply last year. <strong>Accordingly,</strong> we were forced to increase our prices.<br>eg3: Many animals lost their habitats <strong>due to</strong> the wildfires.<br>eg4: Environmental education <strong>contributes to</strong> people’s increasing green thinking in China.<br>eg5: Regular exercise strengthens the heart, <strong>thereby</strong> reducing the risk of heart attack.<br>eg6: The carcinogenic substances (致癌物) are extracted from the soil <strong>; hence,</strong> the soil is left uncontaminated (未被污染的).<br>eg7: The carcinogenic substances are extracted from the soil <strong>, leaving</strong> the soil uncontaminated.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating comparison and contrast</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Coordinating conjunction</td>
<td style="text-align:center">and (comparison/similarity) but, yet (contrast/difference)</td>
</tr>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">similarly, likewise, also, too however, nevertheless, in contrast, on the contrary, conversely</td>
</tr>
<tr>
<td style="text-align:center">Subordinating conjunction</td>
<td style="text-align:center">as, while, whereas,although</td>
</tr>
<tr>
<td style="text-align:center">Prepositional/noun/verb phrases</td>
<td style="text-align:center">like, alike, similar to, the same as, similarity, share… in common, unlike, dissimilar to, differ, different from (in), difference, notwithstanding,  despite, in spite of, instead</td>
</tr>
</tbody>
</table>
</div>
<p>eg1. Most men tend to feel comfortable with “public” speaking, <strong>while/whereas</strong> most women enjoy “private” speaking.<br>eg2. Many environmental problems result from air pollutants <strong>, such as</strong> sulphur dioxide and carbon dioxide.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating exemplification</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">for example, for instance</td>
</tr>
<tr>
<td style="text-align:center">Prepositional/verb phrase/other</td>
<td style="text-align:center">such as, like, a prime/good example of, take… for example one case in point is that…</td>
</tr>
<tr>
<td style="text-align:center">Correlative conjunctions</td>
<td style="text-align:center">not only…but also</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrases</td>
<td style="text-align:center">in addition to, along with, as well as, besides, apart from</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">Connectors indicating summary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Transition</td>
<td style="text-align:center">in summary, in short, in a nutshell, in a word, in simple terms</td>
</tr>
<tr>
<td style="text-align:center">Prepositional/ noun/verb phrases</td>
<td style="text-align:center">to sum up, to make a long story short, to put it in a nutshell, to put it crudely, summarize</td>
</tr>
<tr>
<td style="text-align:center">Correlative conjunctions</td>
<td style="text-align:center">not only…but also</td>
</tr>
<tr>
<td style="text-align:center">Prepositional phrases</td>
<td style="text-align:center">in addition to, along with, as well as, besides, apart from</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-the-typical-structure-of-a-research-paper"><a href="#3-the-typical-structure-of-a-research-paper" class="headerlink" title="3 the typical structure of a research paper"></a>3 the typical structure of a research paper</h2><p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-14-43-36.png" alt></p>
<h3 id="3-1-Title"><a href="#3-1-Title" class="headerlink" title="3.1 Title"></a>3.1 Title</h3><p>All words in the title should be chosen with great care!<br>“the fewest possible words that adequately describe the contents of the paper”  (Gastel &amp; Day, 2016, p.41)</p>
<p><strong>Functions of Title</strong><br>(1) Generalize the research paper<br>(2) Attract appropriate readers<br>(3) Facilitate the retrieval<br><strong>Brief （简洁）</strong><br>11-15 words now being the most common length.</p>
<p><strong>Accurate (准确)</strong><br>Accurate, clear, and exact<br>Without any misunderstandings<br>Grammatically accurate (word order)</p>
<p><strong>Distinctive (区别性)</strong><br>Be specific and distinctive to distinguish it from other treatments of the general subjects.<br>The research design identification is essential. </p>
<h3 id="3-1-Abstract"><a href="#3-1-Abstract" class="headerlink" title="3.1 Abstract"></a>3.1 Abstract</h3><p><strong>Abstracts are highly promotional and designed to “hook the reader”.</strong></p>
<ol>
<li>summarize the important parts of the article (100-250 words)</li>
<li>arouse readers’ interest in reading the article</li>
<li>make journal editors want  to read and publish the article help readers remember key points from your paper</li>
<li>be accurate, nonevaluative, coherent and  readable (APA, 2010)</li>
</ol>
<p><strong>Five questions to answer in Abstract</strong> </p>
<ol>
<li>What is the <em>background</em> of the study in the research field? What <em>motivated</em> you to do this study? <strong>(Introduction:background and motivated)</strong> </li>
<li>What is the purpose of the study? What are the research questions?  <strong>(Purpose and significance)</strong></li>
<li>How were the data collected and analyzed? <strong>(Method:key skill\Method\idea\application)</strong></li>
<li>What were the results or major findings? <strong>(Result:Present main findings/results )</strong></li>
<li>What conclusion have you drawn? What is the <em>contribution</em> of the study to the existing body of knowledge? <strong>(Conclusion:gap/impact/solution/expand knowledge/inspire)</strong></li>
</ol>
<p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-15-08-26.png" alt="summary"></p>
<h3 id="3-2-Introduction"><a href="#3-2-Introduction" class="headerlink" title="3.2 Introduction"></a>3.2 Introduction</h3><h4 id="3-2-1-Introduction-structure"><a href="#3-2-1-Introduction-structure" class="headerlink" title="3.2.1 Introduction structure"></a>3.2.1 Introduction structure</h4><p><strong>Move 1: Establishing a territory</strong></p>
<ul>
<li>Step 1. Claiming centrality </li>
<li>Step 2. Topic generalizations of increasing specificity</li>
<li>Step 3. Reviewing items of previous literature </li>
</ul>
<p><strong>Move 2: Establishing a niche</strong></p>
<ul>
<li>Step 1A. Indicating a gap</li>
<li>Step 1B. Adding to what is known </li>
<li>Step 2.  Presenting positive justification (Optional) </li>
</ul>
<p><strong>Move 3: Presenting the present work</strong> </p>
<ul>
<li>Step 1. Announcing present research descriptively and/or purposively</li>
<li>Step 2. Presenting research questions or hypothesis (optional)</li>
<li>Step 3. Definitional clarifications (optional)</li>
<li>Step 4. Summarizing methods (optional)</li>
<li>Step 5. Announcing principle outcomes (Possible in some fields)</li>
<li>Step 6. Stating the value of the present research (Possible in some fields)</li>
<li>Step 7. Outlining the structure of the paper (Possible in some fields)</li>
</ul>
<h4 id="3-2-2-Claiming-centrality-Establishing-significance"><a href="#3-2-2-Claiming-centrality-Establishing-significance" class="headerlink" title="3.2.2 Claiming centrality/Establishing significance"></a>3.2.2 Claiming centrality/Establishing significance</h4><p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-15-21-05.png" alt></p>
<h4 id="3-2-3-Indicating-a-gap"><a href="#3-2-3-Indicating-a-gap" class="headerlink" title="3.2.3 Indicating a gap"></a>3.2.3 Indicating a gap</h4><ol>
<li><strong>However</strong>, research evaluating creeping bentgrass reflectance under water stress and varying nitrogen rates for correlation with turf quality …<strong>has not been documented</strong>. </li>
<li><strong>Nonetheless</strong>, data to assess the feasibility of extractive reserves are <strong>limited. Few studies</strong> of rainforest extraction have presented a quantitative ecological framework…  </li>
<li><strong>While</strong> this body of research has enriched our knowledge about peer interaction in peer feedback, <strong>scant attention has been paid to</strong> the specific strategies EFL students use during peer feedback to cope with the linguistic and cognitive challenges that arise during the peer interaction. </li>
<li>Furthermore, <strong>little is known about</strong> the boundary conditions of the relationship between economic strain and social cohesion, especially the role that….</li>
<li><strong>Few researchers have addressed the problem</strong> of… </li>
<li><strong>There remains a need for an efficient method</strong> that can… </li>
<li>The high absorbance makes this <strong>an impractical option</strong> in cases…</li>
<li><strong>Nonetheless</strong>, these methods <strong>do not sufficiently</strong> address …</li>
<li>These can be <strong>time-consuming and technically difficult</strong> to perform.</li>
<li><strong>Although</strong> this approach improves performance, it results in <strong>an unacceptable</strong> number of…</li>
<li>One <strong>primary problem</strong> with … is that…</li>
<li><strong>Notwithstanding</strong> the merits and proliferation of chatbots, their incorporation into writing classrooms <strong>remains insufficient</strong>.</li>
<li><strong>Nevertheless, there is a notable scarcity of research dedicated to investigating how</strong> students effectively compose text with chatbots.<br><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-15-31-27.png" alt></li>
</ol>
<h4 id="3-2-4-Presenting-the-present-work"><a href="#3-2-4-Presenting-the-present-work" class="headerlink" title="3.2.4 Presenting the present work"></a>3.2.4 Presenting the present work</h4><p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-15-32-50.png" alt></p>
<h3 id="3-3-Review-of-the-literature"><a href="#3-3-Review-of-the-literature" class="headerlink" title="3.3 Review of the literature"></a>3.3 Review of the literature</h3><p>A literature review <strong>summarizes, interprets, and critically evaluates</strong> significant literature published on a specific topic.  </p>
<h4 id="3-3-1-Why-Literature-Review-matters"><a href="#3-3-1-Why-Literature-Review-matters" class="headerlink" title="3.3.1 Why Literature Review matters?"></a>3.3.1 Why Literature Review matters?</h4><ol>
<li><strong>Demonstrate</strong> your knowledge of the topic and scholarly context </li>
<li>Show <strong>respect to “giants”</strong> in your field</li>
<li>Develop a theoretical <strong>framework and methodology</strong> for your research</li>
<li><strong>Position yourself</strong> in relation to other researchers and theorists </li>
<li><strong>Situate</strong> your work within the social and disciplinary context</li>
<li>Prepare and <strong>justify the research questions or hypotheses</strong> of your study</li>
<li>Show how your research addresses <strong>a gap or contributes</strong> to a debate</li>
<li>Add <strong>authority</strong> to the present study  (by “quoting” from the authorities to support your study)</li>
</ol>
<h4 id="3-3-2-What-features-good-Literature-Review"><a href="#3-3-2-What-features-good-Literature-Review" class="headerlink" title="3.3.2 What features good Literature Review?"></a>3.3.2 What features good Literature Review?</h4><ol>
<li><strong>A coherent argument</strong> </li>
<li><strong>A critical evaluation</strong> of what has been done: summarising the findings of related studies and establishing gaps or weaknesses in the present knowledge to pave the way for new knowledge claims (Thompson, 2009)</li>
<li>The overall rhetorical organisation tends to follow the CARS model (Swales, 1990) of Introduction</li>
<li>A <em>separate</em> section/chapter or being <em>integrated</em> into Introduction<h4 id="3-3-3-The-processes-of-conducting-Literature-Review"><a href="#3-3-3-The-processes-of-conducting-Literature-Review" class="headerlink" title="3.3.3 The processes of conducting Literature Review"></a>3.3.3 The processes of conducting Literature Review</h4>Step 1. Clearly define topic &amp; research questions<br>Step 2. Search for literature using key words and reference lists<br>Step 3. Select and evaluate literature<br>Step 4. Analyze and summarize the literature<br>Step 5. Identify themes, debates, and gaps<br>Step 6. Outline your literature review’s structure</li>
</ol>
<ul>
<li>Chronological: trace the development of the topic over time; avoid simply listing and summarizing sources in order</li>
<li>Thematic: use subsections to address different aspects of the topic</li>
<li>Methodological: compare the results and conclusions that emerge from different approaches</li>
<li>Theoretical: argue for the relevance of a specific theoretical approach; create a framework for your research</li>
</ul>
<p>Step 7. Write your literature review</p>
<h3 id="3-4-Methodology"><a href="#3-4-Methodology" class="headerlink" title="3.4 Methodology"></a>3.4 Methodology</h3><h4 id="3-4-1-Purposes-of-Methodology"><a href="#3-4-1-Purposes-of-Methodology" class="headerlink" title="3.4.1 Purposes of Methodology"></a>3.4.1 Purposes of Methodology</h4><p>To present <strong>a clear and detailed description</strong> of how an experiment or an investigation was done<br>To provide careful instructions so that the process of your experiment or investigation can be easily <strong>visualized and replicated</strong> (Cotos et al., 2017)<br>To provide the information the reader needs to <strong>judge the study’s validity</strong> (Cargill &amp; O’Connor, 2009) </p>
<h4 id="3-4-2-Components-of-Methodology"><a href="#3-4-2-Components-of-Methodology" class="headerlink" title="3.4.2 Components of Methodology"></a>3.4.2 Components of Methodology</h4><p><strong>1.Generalization/ Introduction</strong><br>Gives an overview of the entire section<br>Provides necessary background information<br>Introduces the principal activity<br>Identifies &amp; justifies the methodological approach</p>
<p><strong>2. Methods/Procedures</strong><br>Rules of thumb for describing the methods/procedures<br>If the method has been published, provide the reference.<br>If the method is well-established, just mention its name.<br>If a new method is introduced, try to provide the detailed information precisely and concisely.<br>Questions of HOW and HOW MUCH should be answered precisely to make the procedures clear and replicable </p>
<p><strong>3. Data Analysis</strong><br>This part deals with the procedures of analyzing the data collected in the previous section and verify its validity. </p>
<p>For some discipline/journals, data analysis is integrated into the Results section. </p>
<h3 id="3-5-Results"><a href="#3-5-Results" class="headerlink" title="3.5 Results"></a>3.5 Results</h3><p><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-15-56-11.png" alt></p>
<h4 id="3-5-1-Why-do-we-need-to-write-Results-in-text"><a href="#3-5-1-Why-do-we-need-to-write-Results-in-text" class="headerlink" title="3.5.1 Why do we need to write Results in text?"></a>3.5.1 Why do we need to write Results in text?</h4><ul>
<li><strong>To highlight our interesting and significant results</strong> </li>
<li>To talk about the results as <strong>a solution</strong> to the problems raised in Introduction</li>
<li><strong>Numbers don’t speak for themselves!</strong> We should tell the readers what these numbers mean.   </li>
</ul>
<h4 id="3-5-2-Example-REVIEW-COMMENT"><a href="#3-5-2-Example-REVIEW-COMMENT" class="headerlink" title="3.5.2 Example:REVIEW COMMENT"></a>3.5.2 Example:REVIEW COMMENT</h4><p>COMMENT1: At times this paper reads like a thesis. The authors seem to have included all their results, with the consequence that I am not sure which findings are significant and which are not. However, I also suspect that some contradictory findings have not been included. So although I generally recommend brevity, this should not include leaving out key findings that do not support the authors’ line of logic.</p>
<p>COMMENT2: Rather than highlighting the results that are significant or relevant, the authors have merely repeated in the text everything that they have put in their figures and tables, which seem to include every piece of data that the authors have elaborated in the last three years. This makes for very tedious reading. Moreover, I felt that I was not given the tools to understand for myself the significance of their data.</p>
<h4 id="3-5-3-A-model-to-structure-Results-section"><a href="#3-5-3-A-model-to-structure-Results-section" class="headerlink" title="3.5.3 A model to structure Results section"></a>3.5.3 A model to structure Results section</h4><p>Move 1.  Stating the preparatory information<br>1) Revisiting  the research aim/ existing research<br>2) Revisiting/expanding methodology<br>3) General overview of results </p>
<p>Move 2. Announcing results<br>1) Invitation to view results<br>2) Specify key results in detail, with or without explanations</p>
<p>Move 3.  Commenting on results<br>1) Compare results with other research<br>2) Compare results with model predictions<br>3) Problems with results<br>4) Possible implications of results </p>
<p><strong>Move 1. example sentence</strong></p>
<ul>
<li>The results are divided into two parts as follows: </li>
<li>It is apparent that in all/most/the majority of cases…</li>
<li>Using the method described above, we obtained …</li>
<li>Levels of weight loss were similar in all cases.</li>
<li>In general, coefficients for months close to the mean flowering data were negative.</li>
</ul>
<p><strong>Move 2. example sentence</strong><br>Invitation to review results </p>
<ul>
<li>The stress data in Fig. 18 indicate/demonstrate/ display/ reveal/suggest a more reasonable relationship.</li>
<li>Figure 3 illustrates/reports/presents/shows the findings of the spatial time activity modelling.</li>
<li>The results are summarised in Table 4.</li>
<li>The rate constants shown in Table 1 demonstrate that the reactivity is much greater at neutral pH.</li>
<li>As shown/detailed/listed/illustrated in Figure 1, … </li>
</ul>
<p>Presenting specific/key results in detail</p>
<ul>
<li>… accelerate/change/decline/decrease/ drop/ expand/ fall/ increase..</li>
<li>is/are/was/were constant/ different/equal/ higher/ identical/ lower/ unchanged/ uniform/ unaffected.. </li>
<li>It eventually levelled off at a terminal velocity of 300 m/s. </li>
<li>It can be observed from Fig. 2 that there was only a very small enhancement when H2O2 was present.</li>
<li>Comparing Figs. 4 and 5, it is obvious that a significant improvement was obtained in the majority of cases.</li>
</ul>
<p><strong>Move 3. example sentence</strong><br>Comparison with other results </p>
<ul>
<li>The SFS results obtained here are in exceptionally good agreement with existing FE results.</li>
<li>Our concordance scores strongly confirm previous predictions.</li>
<li>The numerical model tends to give predictions that are parallel to the experimental data from corresponding tests.</li>
<li>This is consistent with results obtained in [1]. </li>
<li>verify/ validate/ support/ reinforce/ refute/ match/ extend/ expand/ be unlike/ be inconsistent with/ disprove/ contrary to…</li>
</ul>
<p>Stating problems with results </p>
<ul>
<li>The correlation between the two methods was somewhat less in the case of a central concentrated point load.</li>
<li>It should, however, be noted that in FE methods, the degree of mesh refinement may affect the results.</li>
<li>Minimise the problem: despite this/ negligible/slightly… </li>
<li>It is difficult to simulate the behaviour of the joints realistically.</li>
<li>Suggest reasons for the problem: unavailable/ possible source of error/ not examined in this study… </li>
</ul>
<h4 id="3-5-4-example-sentence"><a href="#3-5-4-example-sentence" class="headerlink" title="3.5.4 example sentence"></a>3.5.4 example sentence</h4><p><strong>The data don’t speak for themselves! The vocabulary we use to describe the data will influence how readers interpret our results.</strong><br>nearly<br>extremely (high/low)<br>practically<br>fewer (than)<br>significant<br>under<br>close (to)<br>considerable<br>barely<br>at least<br>a great deal (of)<br>far (above/below)<br>as few as 45<br>only<br>even (higher/lower)<br><img src="/2024/05/25/Practical-English-Writing-Course-Notes/2024-05-24-16-11-31.png" alt></p>
<p><strong>Statements of negative results</strong> </p>
<ol>
<li><strong>No significant difference</strong> between the two groups was evident.</li>
<li><strong>None of</strong> these differences were <strong>statistically significant</strong>.</li>
<li><strong>No evidence was found</strong> for non-linear associations between X and Y.<br>Only <strong>trace amounts</strong> of X were detected in …</li>
<li><strong>There was no evidence that</strong> X has an influence on …</li>
<li>Overall, X <strong>did not affect</strong> males and females differently in these measures.</li>
<li><strong>There was no observed difference in</strong> the number of…</li>
</ol>
<p><strong>Statements of positive results</strong></p>
<ol>
<li><strong>Strong evidence</strong> of X was found when …</li>
<li>This result is <strong>significant</strong> at the p = 0.05 level.</li>
<li>A <strong>positive correlation</strong> was found between X and Y.</li>
<li>There was a <strong>significant positive correlation</strong> between …</li>
<li>The difference between the X and Y groups was <strong>significant</strong>.</li>
<li>There was <strong>a significant difference</strong> between the two conditions …</li>
</ol>
<p><strong>highlight findings</strong></p>
<ol>
<li>This result is <strong>somewhat counterintuitive</strong>.</li>
<li>The <strong>more surprising correlation</strong> is with the …</li>
<li>The <strong>most surprising aspect</strong> of the data is in the …</li>
<li>The correlation between X and Y is <strong>interesting</strong> because …</li>
<li>The most <strong>striking</strong> result to emerge from the data is that …</li>
<li><strong>Interestingly,</strong> there were also differences in the ratios of …</li>
<li><strong>The single most striking observation to</strong> emerge from the data comparison was …</li>
</ol>
<h3 id="3-6-Discussion-and-Conclusion"><a href="#3-6-Discussion-and-Conclusion" class="headerlink" title="3.6 Discussion and Conclusion"></a>3.6 Discussion and Conclusion</h3><p>(Discussion)To interpret and describe <strong>the significance of your findings</strong> in light of what was already known about the research problem being investigated<br>To explain any <strong>new understanding or fresh insights</strong> about the problem after you’ve taken the findings into consideration<br>To explain how your study has <strong>moved the reader‘s understanding of the research problem forward</strong> from where you left them at the end of introduction/Literature Review</p>
<p>(Conclusion)To <strong>summarize</strong> the research<br>To <strong>elaborate</strong> the well-reasoned argument<br>To emphasize the <strong>significance</strong> by elaborating on the applications, implications, and/or future work<br>To move readers from the world of your paper back to their own world (Rosen et al., 1999)</p>
<h4 id="3-6-1-Example-REVIEW-COMMENT"><a href="#3-6-1-Example-REVIEW-COMMENT" class="headerlink" title="3.6.1 Example:REVIEW COMMENT"></a>3.6.1 Example:REVIEW COMMENT</h4><p>The Discussion fails to relate the findings and observations to other relevant studies, and there appears to be no discussion on the implications and limitations of these findings.</p>
<p>In my work as a reviewer, I often have difficulty in understanding how significant the authors feel their work is, and why their findings add value. This is because authors are not explicit enough – they don’t signal to<br>me (and the reader) that they are about to say, or are now saying, something important. The result is that their achievement may be hidden in the middle of a nondescript sentence in a nondescript paragraph … and no one will notice it.</p>
<h4 id="3-6-2-A-tentative-model-for-Discussion-A-summary"><a href="#3-6-2-A-tentative-model-for-Discussion-A-summary" class="headerlink" title="3.6.2 A tentative model for Discussion: A summary"></a>3.6.2 A tentative model for Discussion: A summary</h4><p>Move 1: Background information: review of research purposes/theory/ methodology</p>
<ul>
<li>Revisiting previous research </li>
<li>Revisiting previous sections</li>
</ul>
<p>Move 2: Reporting /summarizing results: integration of specific results</p>
<ul>
<li>Summarizing/revisiting key results</li>
</ul>
<p>Move 3: Explaining and evaluating results: establishing meaning &amp; significance</p>
<ul>
<li>Interpretation of/ Explanation for results</li>
<li>Comparisons with existing research</li>
<li>Achievement or contribution  </li>
<li>Implications/applications </li>
<li>Limitations </li>
<li>Future work</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Python Basic Notes</title>
    <url>/2024/07/13/Python-Basic-Notes/</url>
    <content><![CDATA[<h1 id="PYTHON-基础"><a href="#PYTHON-基础" class="headerlink" title="PYTHON 基础"></a>PYTHON 基础</h1><h2 id="1-python-流程格式"><a href="#1-python-流程格式" class="headerlink" title="1. python 流程格式"></a>1. python 流程格式</h2><h3 id="1-1-变量赋值、运算与字符串表示、处理、判断"><a href="#1-1-变量赋值、运算与字符串表示、处理、判断" class="headerlink" title="1.1 变量赋值、运算与字符串表示、处理、判断"></a>1.1 变量赋值、运算与字符串表示、处理、判断</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name1 = name2 = name3 = <span class="string">'文件系统'</span></span><br><span class="line">name1, name2, name3 = <span class="string">"文件"</span>, <span class="string">"系统"</span>, <span class="string">"管理"</span></span><br><span class="line">name = <span class="string">""" </span></span><br><span class="line"><span class="string">ni</span></span><br><span class="line"><span class="string">hao</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##变量多行用 """....."""</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>变量运算表</strong><br>|  运算   |             描述             |<br>| :——-: | :—————————————: |<br>| + - <em> / | 加减乘除 (+可用于连接string) |<br>|    %    |      取模（102%100=2）       |<br>|   <em>*    |       幂次方（2</em></em>3=8）       |<br>|   //    |      取除数（20//3=6）       |</p>
<p><strong>字符串输出表</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方式</th>
<th style="text-align:center">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:,</td>
<td style="text-align:center">每 3 个 0 就用逗号隔开，比如 1,000</td>
</tr>
<tr>
<td style="text-align:center">:b</td>
<td style="text-align:center">该数字的二进制</td>
</tr>
<tr>
<td style="text-align:center">:d</td>
<td style="text-align:center">整数型</td>
</tr>
<tr>
<td style="text-align:center">:f</td>
<td style="text-align:center">小数模式</td>
</tr>
<tr>
<td style="text-align:center">:%</td>
<td style="text-align:center">百分比模式</td>
</tr>
</tbody>
</table>
</div>
<p><strong>1 字符串表示 ( %百分号模式 与 format功能 与 f格式化字符串)</strong><br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name = <span class="string">"hm"</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是 %s !我 %d 岁了"</span> % (name, age))   <span class="comment">#百分号模式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是 {} !我 {} 岁了"</span>.<span class="built_in">format</span>(name, age))<span class="comment">#format功能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"我的名字是 <span class="subst">{name}</span> !我 <span class="subst">{age}</span> 岁了"</span>)   <span class="comment">#f 格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我 {:.3f} 米高"</span>.<span class="built_in">format</span>(<span class="number">1.12345</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我 {ht:.1f} 米高"</span>.<span class="built_in">format</span>(ht=<span class="number">1.12345</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我 {:3d} 米高"</span>.<span class="built_in">format</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我 {:3d} 米高"</span>.<span class="built_in">format</span>(<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"You scored {:.2%}"</span>.<span class="built_in">format</span>(<span class="number">2.1234</span>))</span><br><span class="line">score = <span class="number">2.1234</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"You scored <span class="subst">{score:<span class="number">.2</span>%}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"You scored <span class="subst">{<span class="number">12</span>:5d}</span>"</span>)</span><br><span class="line"><span class="comment">#我的名字是 hm !我 24 岁了</span></span><br><span class="line"><span class="comment">#我 1.123 米高</span></span><br><span class="line"><span class="comment">#我 1.1 米高</span></span><br><span class="line"><span class="comment">#我   1 米高</span></span><br><span class="line"><span class="comment">#我  21 米高</span></span><br><span class="line"><span class="comment">#You scored 212.34%</span></span><br><span class="line"><span class="comment">#You scored 212.34%</span></span><br><span class="line"><span class="comment">#You scored    12</span></span><br></pre></td></tr></tbody></table></figure><br><strong>2 字符串处理与判断</strong><p></p>
<p>string.strip()            去除两端的空白符<br>string.replace(“原始”,”新的”)    替换字符<br>string.lower()          全部做小写处理<br>string.upper()          全部做大写处理<br>string.title()          仅开头的字母大写<br>string.split(“|”)        按要求分割以|进行分割<br>“,”.join([])            按要求合并中间添加,号<br>string.startswith(“你”)    判断是否为你字段开头<br>string.endswith(“哈哈”)    判断是否为哈哈字段结尾<br>&nbsp;</p>
<h3 id="1-2-条件判断、循环、跳出跳过（if-for-while-break-continue）"><a href="#1-2-条件判断、循环、跳出跳过（if-for-while-break-continue）" class="headerlink" title="1.2 条件判断、循环、跳出跳过（if/for/while/break/continue）"></a>1.2 条件判断、循环、跳出跳过（if/for/while/break/continue）</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## IF</span></span><br><span class="line"><span class="comment">#  冒号":"是必要格式不要遗失</span></span><br><span class="line"><span class="keyword">if</span> a==b :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'ds'</span>)</span><br><span class="line"><span class="keyword">elif</span>(a&gt;=b):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'es'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'ys'</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span> </span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">c = b <span class="keyword">if</span> a&gt;=b <span class="keyword">else</span> a  <span class="comment">#简单的if-else 可以写成一行的简写模式</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#  python 从0开始 区间取值均为前闭后开:[3,10) 基础</span></span><br><span class="line"><span class="comment"># for 循环处理有明确长度的序列，那么你第一个想到的应该是 。 </span></span><br><span class="line"><span class="comment"># while 循环无限长序列或者运行无限次数,用条件来限制他的循环次数。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"文件"</span>+ <span class="built_in">str</span>(i)) <span class="comment"># int型与string型不能直接连接需转换int型为string型(文件1)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"文件"</span>, <span class="built_in">str</span>(i)) <span class="comment">#(文件 1) 中间有空格</span></span><br><span class="line"></span><br><span class="line">l = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>)] <span class="comment"># 简单的for 可以写成一行的简写模式</span></span><br><span class="line">l = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>] <span class="comment"># 简单的for+if 可以写成一行的简写模式</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a != <span class="number">10</span>:</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  break:最主要的目的就是为了个性化的终止当前循环.</span></span><br><span class="line"><span class="comment">#  continue: 判断一个数据如果不能被处理的话，我就把它跳过，接着处理下一个数据。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span>    <span class="comment"># 打印所以奇数，跳过偶数</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">break</span>       <span class="comment"># 如果 i=9跳出循环。</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure>
<p>&nbsp;</p>
<h3 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h3><h4 id="1-3-1-List列表、Dict字典、Tuple元组、Set集合"><a href="#1-3-1-List列表、Dict字典、Tuple元组、Set集合" class="headerlink" title="1.3.1 List列表、Dict字典、Tuple元组、Set集合"></a>1.3.1 List列表、Dict字典、Tuple元组、Set集合</h4><p><strong>list “[]”</strong>—— 具有顺序、可存放不同类型；但是<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">files = [<span class="number">1</span>, <span class="string">"file"</span>, [<span class="string">"2"</span>, <span class="number">3.2</span>],<span class="string">"ha"</span>]</span><br><span class="line"><span class="built_in">print</span>( files[<span class="number">2</span>:<span class="number">4</span>]) <span class="comment"># [["2", 3.2],"ha"]  取[2,3)</span></span><br><span class="line"><span class="built_in">print</span>( files[-<span class="number">3</span>:]) <span class="comment"># ["file", ["2", 3.2],"ha"] 从后往前取三个</span></span><br><span class="line"><span class="built_in">print</span>( files[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment"># 3.2</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:    </span><br><span class="line">    <span class="keyword">if</span> f == <span class="string">"f3.txt"</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I got f3.txt"</span>)</span><br><span class="line">（OR）</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">    <span class="keyword">if</span> files[i] == <span class="string">"f3.txt"</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I got f3.txt"</span>)</span><br></pre></td></tr></tbody></table></figure><br><strong>Dict “{“key”:value}”</strong>—— 注意字典中的元素是<strong>没有顺序</strong>的; key-value型<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">files = {<span class="string">"ID"</span>: <span class="number">111</span>, <span class="string">"passport"</span>: <span class="string">"my passport"</span>, <span class="string">"books"</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]}</span><br><span class="line"><span class="built_in">print</span>(files[<span class="string">"books"</span>]) <span class="comment"># [1,2,3]</span></span><br></pre></td></tr></tbody></table></figure><br><strong>Tuple “()”</strong>—— 存放数据值不能被改变，常用来<strong>存放有些常数或固定值</strong>。特别是代码交由别人使用时，你没法控制，也不希望他们改变你的这些固定值。<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">files = (<span class="string">"file1"</span>, <span class="string">"file2"</span>, <span class="string">"file3"</span>)</span><br></pre></td></tr></tbody></table></figure><br><strong>Set “set([])”或”{}”</strong>—— Set常用于去重，set里面只会存在非重复的元素，不管你往里面加了多少相同元素，这些相同元素都会坍缩成一个。 这种特性，我们就可以运用它来做<strong>交集并集</strong>等操作。注意集合中的元素也<strong>没有顺序</strong>的。<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">my_files = <span class="built_in">set</span>([<span class="string">"file1"</span>, <span class="string">"file2"</span>, <span class="string">"file3"</span>])</span><br><span class="line">your_files = {<span class="string">"file1"</span>, <span class="string">"file3"</span>, <span class="string">"file5"</span>}</span><br><span class="line">my_files.add(<span class="string">"file4"</span>)      <span class="comment">#添加</span></span><br><span class="line">my_files.remove(<span class="string">"file3"</span>)   <span class="comment">#移除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"交集 "</span>, your_files.intersection(my_files))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"并集 "</span>, your_files.union(my_files))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"补集 "</span>, your_files.difference(my_files))</span><br></pre></td></tr></tbody></table></figure><br><strong>list 内元素的增加与删除</strong><br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">files = []</span><br><span class="line">files.append(<span class="string">"f"</span>+<span class="built_in">str</span>(<span class="number">1</span>)+<span class="string">".txt"</span>) <span class="comment"># 添加元素</span></span><br><span class="line"><span class="built_in">print</span>(files)</span><br><span class="line">files.pop()   <span class="comment"># 从最后一个开始 pop 出 删除元素</span></span><br><span class="line"><span class="built_in">print</span>( files)</span><br><span class="line"><span class="comment"># 扩充入另一个列表</span></span><br><span class="line">files.extend([<span class="string">"f3.txt"</span>, <span class="string">"f4.txt"</span>])</span><br><span class="line"><span class="comment"># 按位置添加</span></span><br><span class="line">files.insert(<span class="number">1</span>, <span class="string">"file5.txt"</span>)     <span class="comment"># 添加入第1位（首位是0哦）</span></span><br><span class="line"><span class="comment"># 移除某索引</span></span><br><span class="line"><span class="keyword">del</span> files[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 移除某值 </span></span><br><span class="line">files.remove(<span class="string">"f3.txt"</span>)  <span class="comment"># 当存在多个f3.txt时，从0开始移除第一个f3.txt元素</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br>&nbsp;<p></p>
<h4 id="1-3-2-arrly数组-——-Numpy库"><a href="#1-3-2-arrly数组-——-Numpy库" class="headerlink" title="1.3.2 arrly数组 —— Numpy库"></a>1.3.2 arrly数组 —— Numpy库</h4><p>&nbsp;</p>
<h4 id="1-3-3-arrly表-——-Panda库"><a href="#1-3-3-arrly表-——-Panda库" class="headerlink" title="1.3.3 arrly表  —— Panda库"></a>1.3.3 arrly表  —— Panda库</h4><p>&nbsp;</p>
<h3 id="1-4-一些函数的妙用"><a href="#1-4-一些函数的妙用" class="headerlink" title="1.4 一些函数的妙用"></a>1.4 一些函数的妙用</h3><h4 id="1-4-1enumerate-自动加-index"><a href="#1-4-1enumerate-自动加-index" class="headerlink" title="1.4.1enumerate 自动加 index"></a>1.4.1enumerate 自动加 index</h4><p>使用enumerate函数替换 手动计数器 count 的存在.<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line">l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">2</span>:</span><br><span class="line">        data += <span class="number">11</span></span><br><span class="line">    l[count] = data</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> count, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(l,start=<span class="number">0</span>):  <span class="comment">#还可以初始化 count 开始的值</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">2</span>:</span><br><span class="line">        data += <span class="number">11</span></span><br><span class="line">    l[count] = data</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#&gt;[11, 22, 44, 44]</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="1-4-2-Zip-同时迭代"><a href="#1-4-2-Zip-同时迭代" class="headerlink" title="1.4.2 Zip 同时迭代"></a>1.4.2 Zip 同时迭代</h4><p>同时处理多个列表，并把它们做成一个字典。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">score = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">bonus = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">d = {}</span><br><span class="line"><span class="keyword">for</span> n, s, b <span class="keyword">in</span> <span class="built_in">zip</span>(name, score, bonus):</span><br><span class="line">    d[n]=s+b</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="1-4-3-reverse-amp-reversed-翻转列表"><a href="#1-4-3-reverse-amp-reversed-翻转列表" class="headerlink" title="1.4.3 reverse &amp; reversed 翻转列表"></a>1.4.3 reverse &amp; reversed 翻转列表</h4><p>同时处理多个列表，并把它们做成一个字典。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#自己就地反转</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l.reverse()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#&gt;[3, 2, 1]</span></span><br><span class="line">(<span class="keyword">or</span>)</span><br><span class="line"><span class="comment">#用在 for 循环里的翻转迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(l):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#&gt;3 2 1</span></span><br><span class="line">(<span class="keyword">or</span>)</span><br><span class="line"><span class="comment">#copy 出一个浅拷贝副本的反转</span></span><br><span class="line">_l = l[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(_l)</span><br><span class="line"><span class="comment">#&gt;[3, 2, 1]</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="1-4-4-Deep-Copy-amp-Shallow-Copy-复制要点"><a href="#1-4-4-Deep-Copy-amp-Shallow-Copy-复制要点" class="headerlink" title="1.4.4 Deep Copy &amp; Shallow Copy 复制要点"></a>1.4.4 Deep Copy &amp; Shallow Copy 复制要点</h4><p>Deep copy 就是我们通常意义上的复制，把东西全部再造了一遍，彻底成为了两个独立的个体。<br>Shallow Copy, 其实也有一点地址拷贝的意思，通过地址进行映射。 所以真实的实体是没有被复制的，我只复制了这个实体的一个映射地址而已。<br>注：Python 他在创造之初，就有这么个约定，列表中直接存放的<strong>数值、字符</strong>，与存放<strong>class 实例，列表，字典</strong>不同。 对<strong>数值、字符</strong>的复制，直接是复制的值，而不是一个映射地址。<br>程序数据的无端更改其实很有可能就是浅复制造成的，改变了不该被改变的值。但是浅复制的优势就是快。复制是需要内存和时间的，因为浅复制没有真正复制。</p>
<h2 id><a href="#" class="headerlink" title></a><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#存放的数值、字符时相当于Deep Copy</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_l = l.copy()</span><br><span class="line">_l[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(_l)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#&gt; [-1, 2, 3]</span></span><br><span class="line"><span class="comment">#&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#存放的列表时  .copy只是浅拷贝Shallow Copy</span></span><br><span class="line">l = [[<span class="number">1</span>],[<span class="number">2</span>],<span class="number">3</span>]</span><br><span class="line">_l = l.copy()</span><br><span class="line">_l[<span class="number">0</span>][<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(_l)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#&gt; [[-1], [2], 3]</span></span><br><span class="line"><span class="comment">#&gt; [[-1], [2], 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#存放的列表时  如何深拷贝哪？</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">l = [[<span class="number">1</span>],[<span class="number">2</span>],<span class="number">3</span>]</span><br><span class="line">_l = deepcopy(l)</span><br><span class="line">_l[<span class="number">0</span>][<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(_l)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#&gt; [[-1], [2], 3]</span></span><br><span class="line"><span class="comment">#&gt; [[1], [2], 3]</span></span><br></pre></td></tr></tbody></table></figure></h2><h2 id="2-python-框架格式"><a href="#2-python-框架格式" class="headerlink" title="2. python 框架格式"></a>2. python 框架格式</h2><h3 id="2-1-函数-Function-—-类-Class-—-模块-Module"><a href="#2-1-函数-Function-—-类-Class-—-模块-Module" class="headerlink" title="2.1 函数(Function) — 类 (Class) — 模块 (Module)"></a>2.1 函数(Function) — 类 (Class) — 模块 (Module)</h3><p><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>函数功能</strong> ：目的用于基础功能复用，简化程序流程<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">g=<span class="number">3</span></span><br><span class="line"><span class="comment"># 传入变量 其中a=1, b=1, c=1为参数默认值（可以不设置），</span></span><br><span class="line"><span class="comment"># 当未传入a,b,c参数时令其为默认。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, a=<span class="number">1</span>, b=<span class="number">1</span>, c=<span class="number">1</span></span>): </span><br><span class="line">    <span class="keyword">global</span> g    </span><br><span class="line">    <span class="comment">#默认时局部变量不影响函数外部，除非golbal声明，</span></span><br><span class="line">    <span class="comment">#但是要注意全局变量不能同时函数传入变量</span></span><br><span class="line">    g=<span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> a*x**<span class="number">2</span> + b*x + c*<span class="number">3</span>  <span class="comment"># 返回变量</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>))         <span class="comment"># 忽略参数名，按顺序传参</span></span><br><span class="line"><span class="built_in">print</span>(f(x=<span class="number">2</span>, a=<span class="number">1</span>, b=<span class="number">1</span>, c=<span class="number">0</span>)) <span class="comment"># 写上参数名，按名字传参</span></span><br><span class="line"><span class="built_in">print</span>(f(a=<span class="number">1</span>, c=<span class="number">0</span>, x=<span class="number">2</span>, b=<span class="number">1</span>)) <span class="comment"># 若用参数名，可以打乱顺序传参</span></span><br><span class="line"><span class="built_in">print</span>(f(x, a=<span class="number">2</span>))             <span class="comment"># 等价于传入 x=2,a=2, b=1, c=1</span></span><br><span class="line"><span class="built_in">print</span>(g)                     <span class="comment"># 5</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>类</strong> ：在程序中描述具体的一个物体。 比如一只猫有哪些特征，它能做哪些动作。 工程师想出了一个在代码中设置猫特征和动作的办法， 这就有了 class 类的概念。<br>  <strong><em><code>类的目的</code></em></strong> : 基于梳理逻辑步骤形成类,用于统筹管理函数，为函数分类使之条理清晰。 <strong>e.g.</strong> <code>数据处理类</code>（用于实现读写文件、数据提取、正则化、json序列化传输等函数功能）、<code>求解问题类</code>（问题参数、编解码目标函数计算、初始化种群、甘特图绘制等函数）、<code>算法模块</code>（naga-ii\moea/d\RL等类，每个类里包含诸如选择交叉变异的函数）、<code>工具类</code>（获取前沿面、轮盘赌等函数）</p>
<p><strong>a) 类的封装</strong>: 封装自己的属性和功能，把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果存在不想被外界使用的方法，我们可私有化不提供方法给外界访问。<br></p><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用 class File 来创建一个大概念（类），注意我们通常约定类的名字要首字母大写。 </span></span><br><span class="line"><span class="comment"># 然后用 my_file = File() 来创建一个具体的文件。</span></span><br><span class="line"><span class="comment"># self 类内部的索引，用于获取该类的属性或者功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fjsp_RMT</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, job_num, machine_num, p1, p2, parm_data</span>):  <span class="comment">#初始化实例</span></span><br><span class="line">        self.job_num = job_num  <span class="comment"># 工件数</span></span><br><span class="line">        self.machine_num = machine_num  <span class="comment"># 机器数</span></span><br><span class="line">        self.p1 = p1  <span class="comment"># 全局选择的概率    </span></span><br><span class="line">        self._p2 = p2  <span class="comment"># 局部选择的概率  (_开头我不想让别人用这个变量，但是还是可以用）</span></span><br><span class="line">        self.__deleted = <span class="literal">False</span>  <span class="comment">#  __开头我不让别人用这个变量</span></span><br><span class="line">        self.product, self.machines, self.F_cog,self.F_time, </span><br><span class="line">        self.F_cost= parm_data[<span class="number">0</span>], parm_data[<span class="number">1</span>],parm_data[<span class="number">2</span>], parm_data[<span class="number">3</span>],parm_data[<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 类内部的功能返回时均带self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"工件数为:"</span>+ <span class="built_in">str</span>(self.job_num) + <span class="string">" ,机器数为:"</span> +<span class="built_in">str</span>(self.machine_num)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__force_delete</span>(<span class="params">self</span>):   <span class="comment"># 我不让别人使用这个功能</span></span><br><span class="line">        self.__deleted = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_soft_delete</span>(<span class="params">self</span>):     <span class="comment"># 我不想让别人使用这个功能</span></span><br><span class="line">        self.__force_delete()   <span class="comment"># 我自己可以在内部随便调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">fjsp_rmt=Fjsp_RMT(<span class="number">4</span>, <span class="number">3</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(fjsp_rmt.get_info())</span><br></pre></td></tr></tbody></table></figure><br>|     私有形式      |                            特点                            |<br>| :———————-: | :————————————————————————————: |<br>| _ 一个下划线开头  | <code>弱隐藏</code> <strong>不想让</strong>别人用 （别人在必要情况下还是可以用的） |<br>| __ 两个下划线开头 |                  <code>强隐藏</code> <strong>不让</strong>别人用                   |<p></p>
<p><strong>b) 类的继承与多态</strong>:<br> <strong>继承</strong>：是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。集成特点如下:</p>
<ol>
<li>父类变，子类就必须变</li>
<li>继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。</li>
<li>继承是一种强耦合关系</li>
</ol>
<p><strong>多态</strong>：若子类重写了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。实现多态有三个必要条件：继承、重写、调用父类的属性/函数。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fjsp_RMT_singe</span>(<span class="title class_ inherited__">Fjsp_RMT</span>):  <span class="comment"># 继承了 Fjsp_RMT 的属性和功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, job_num, machine_num, p1, p2, parm_data, add</span>):</span><br><span class="line">        <span class="comment"># 将共用属性的设置导入 File 父类</span></span><br><span class="line">        <span class="comment">#继承父类super的init参数时属于外部无需self  加入self 会报错</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(job_num, machine_num, p1, p2, parm_data) </span><br><span class="line">        self.add = add</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_more_info</span>(<span class="params">self</span>): <span class="comment"># 也可以在子类里复用父类功能</span></span><br><span class="line">        <span class="keyword">return</span> self.get_info() + <span class="string">",singe:"</span>+ <span class="built_in">str</span>(self.add)</span><br><span class="line">fjsp_rmt_singe=Fjsp_RMT_singe(<span class="number">4</span>, <span class="number">3</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],(<span class="number">1080</span>, <span class="number">720</span>))</span><br><span class="line"><span class="built_in">print</span>(fjsp_rmt_singe.get_info())      <span class="comment"># 调用父类的功能</span></span><br><span class="line"><span class="built_in">print</span>(fjsp_rmt_singe.p1)              <span class="comment"># 调用父类的属性</span></span><br><span class="line"><span class="built_in">print</span>(fjsp_rmt_singe.add)             <span class="comment"># 调用自己的属性</span></span><br><span class="line"><span class="built_in">print</span>(fjsp_rmt_singe.get_more_info()) <span class="comment"># 调用自己加工父类的功能</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>模块</strong> ：module主要是为了一个相对比较大的工程，涉及到多个文件之间的互相调用关系。<br>  <code>算法模块</code>（包括naga-ii\moea/d\RL等类，每个类里包含诸如参数等属性以及选择、交叉、变异的函数功能）。</p>
<p><span class="github-emoji"><span>⭕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong><em>统一规范：不涉及python包时均使用 import </em> as A 形式；涉及到 python包时采用from  A import <em> 形式并与<strong>init</strong>.py配合</em></strong>（原因：一般通用类都用 import numpy as np的形式，而python包中基本都是自己创建的程序类有实际用途所以包是空壳子没必要带着）<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">#**如下代码显示了模块调用、导入的两种形式**</span></span><br><span class="line"> <span class="comment"># FJSP_RMT.py 和 main.py 在同一目录下 （main调用FJSP_RMT时）</span></span><br><span class="line">直接 <span class="keyword">import</span> 即可：</span><br><span class="line"><span class="keyword">import</span> FJSP_RMT <span class="keyword">as</span> problem</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> *</span><br></pre></td></tr></tbody></table></figure><br>上述两者的区别是：<p></p>
<ol>
<li>如果用 import FJSP_RMT as problem，我们在调用FJSP_RMT.py中定义的函数fun1()或类class1()时，需要写成 problem.fun1()或problem.class1()；</li>
<li>如果用 from FJSP_RMT import *，我们在调用FJSP_RMT.py中定义的函数fun1()或类class1()时，可以直接写成 fun1()或class1()；<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Algorithm模块下的NSGA2.py 和 main.py 在不同级的目录下 （main调用Algorithm时）</span></span><br><span class="line"><span class="keyword">from</span>  Algorithm <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 在Algorithm模块下的__init__.py中输入该行代码 .NSGA2代表返回上一目录后找到NSGA2.py</span></span><br><span class="line"><span class="keyword">from</span> .NSGA2 <span class="keyword">import</span> NSGA2    </span><br><span class="line">则我们在调用NSGA2.py中定义的函数fun1()或类class1()时，可以直接写成 fun1()或class1()；</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Algorithm.NSGA2 <span class="keyword">as</span> NSGA2</span><br><span class="line">并把Algorithm模块下的__init__.py清空</span><br><span class="line">则我们在调用NSGA2.py中定义的函数fun1()或类class1()时，可以直接写成 NSGA2.fun1()或NSGA2.class1()</span><br></pre></td></tr></tbody></table></figure>
&nbsp;<h3 id="2-2-异常处理-try-except-raise-与-单元测试-Unittest"><a href="#2-2-异常处理-try-except-raise-与-单元测试-Unittest" class="headerlink" title="2.2 异常处理(try-except\raise) 与 单元测试 (Unittest)"></a>2.2 异常处理(try-except\raise) 与 单元测试 (Unittest)</h3><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>异常处理(try-except)</strong><br>  代码出错不可避免，即便自己编写代码做到无错误 ，如果你的代码基于他人的代码，别人代码出错。即使别人的代码不出错，但是也有可能物理环境会出错呀，比如 CPU 超了，某人的服务运行失败，你恰好又是基于他提供的服务，你也跟着超时了。这些都会让你的程序报错。<strong>异常处理就是帮助我们去处理错误，预估到可能会报什么错误然后用try-except 结构包住处理，达到不妨碍接下来的代码执行。</strong><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#try-except 结构 同时处理多个异常 </span></span><br><span class="line">d = {<span class="string">"name"</span>: <span class="string">"f1"</span>, <span class="string">"age"</span>: <span class="number">2</span>}</span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    v = d[<span class="string">"gender"</span>]</span><br><span class="line">    l[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">except</span> (KeyError, IndexError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"key or index error for:"</span>, e)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#try-except 结构 分开处理多个异常</span></span><br><span class="line">d = {<span class="string">"name"</span>: <span class="string">"f1"</span>, <span class="string">"age"</span>: <span class="number">2</span>}</span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    v = d[<span class="string">"gender"</span>]</span><br><span class="line">    l[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"key error for:"</span>, e)</span><br><span class="line">    d[<span class="string">"gender"</span>] = <span class="string">"x"</span></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"index error for:"</span>, e)</span><br><span class="line">    l.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></tbody></table></figure>
还有一个 try-except-else 的模式，在 else 中处理没有报错的情况。报错情况下不会执行else下的代码，不报错会执行。<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># try-except-else 结构</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    l[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"no error, now in else"</span>)</span><br></pre></td></tr></tbody></table></figure>
如果 else 是为了执行没有异常的状况，那么 finally 就是为了执行 不管有没有异常 的情况。无论有报错还是没报错，finally 下面的代码都会运行。<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># try-except-finally 结构</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    l[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"reach finally"</span>)</span><br></pre></td></tr></tbody></table></figure>
上面这两种模式主要用在什么 case 当中呢？你想一下，是不是有些时候，不管你有没有报错，你都想让程序去执行什么。我们甚至都不需要为任何异常做任何处理。 这种时候也就是说，你有异常，我不让你终止主程序，你没有异常吧，万事大吉。<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    dddd = dddddd</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I know there is error, so what?"</span>)</span><br></pre></td></tr></tbody></table></figure>
<span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>raise手动触发异常</strong><br>   raise 是你为别人犯错留下的证据，或者是告诉别人你怎么犯错的。这个信息对于别人 dubug 你的代码十分有好处。另一种情况是，你写了成百上千行代码，你也不能全记住代码的每一个细节。所以一旦报错，你也需要一个友善的错误信息提示，这时用 raise 准没错。<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">no_negative</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"I said no negative"</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"><span class="built_in">print</span>(no_negative(-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment"># ValueError: I said no negative</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">异常名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BaseException</td>
<td style="text-align:center">所有异常的基类</td>
</tr>
<tr>
<td style="text-align:center">SystemExit</td>
<td style="text-align:center">解释器请求退出</td>
</tr>
<tr>
<td style="text-align:center">KeyboardInterrupt</td>
<td style="text-align:center">用户中断执行(通常是输入^C)</td>
</tr>
<tr>
<td style="text-align:center">Exception</td>
<td style="text-align:center">常规错误的基类</td>
</tr>
<tr>
<td style="text-align:center">StopIteration</td>
<td style="text-align:center">迭代器没有更多的值</td>
</tr>
<tr>
<td style="text-align:center">GeneratorExit</td>
<td style="text-align:center">生成器(generator)发生异常来通知退出</td>
</tr>
<tr>
<td style="text-align:center">StandardError</td>
<td style="text-align:center">所有的内建标准异常的基类</td>
</tr>
<tr>
<td style="text-align:center">ArithmeticError</td>
<td style="text-align:center">所有数值计算错误的基类</td>
</tr>
<tr>
<td style="text-align:center">FloatingPointError</td>
<td style="text-align:center">浮点计算错误</td>
</tr>
<tr>
<td style="text-align:center">OverflowError</td>
<td style="text-align:center">数值运算超出最大限制</td>
</tr>
<tr>
<td style="text-align:center">ZeroDivisionError</td>
<td style="text-align:center">除(或取模)零 (所有数据类型)</td>
</tr>
<tr>
<td style="text-align:center">AssertionError</td>
<td style="text-align:center">断言语句失败</td>
</tr>
<tr>
<td style="text-align:center">AttributeError</td>
<td style="text-align:center">对象没有这个属性</td>
</tr>
<tr>
<td style="text-align:center">EOFError</td>
<td style="text-align:center">没有内建输入,到达EOF 标记</td>
</tr>
<tr>
<td style="text-align:center">EnvironmentError</td>
<td style="text-align:center">操作系统错误的基类</td>
</tr>
<tr>
<td style="text-align:center">IOError</td>
<td style="text-align:center">输入/输出操作失败</td>
</tr>
<tr>
<td style="text-align:center">OSError</td>
<td style="text-align:center">操作系统错误</td>
</tr>
<tr>
<td style="text-align:center">WindowsError</td>
<td style="text-align:center">系统调用失败</td>
</tr>
<tr>
<td style="text-align:center">ImportError</td>
<td style="text-align:center">导入模块/对象失败</td>
</tr>
<tr>
<td style="text-align:center">LookupError</td>
<td style="text-align:center">无效数据查询的基类</td>
</tr>
<tr>
<td style="text-align:center">IndexError</td>
<td style="text-align:center">序列中没有此索引(index)</td>
</tr>
<tr>
<td style="text-align:center">KeyError</td>
<td style="text-align:center">映射中没有这个键</td>
</tr>
<tr>
<td style="text-align:center">MemoryError</td>
<td style="text-align:center">内存溢出错误(对于Python 解释器不是致命的)</td>
</tr>
<tr>
<td style="text-align:center">NameError</td>
<td style="text-align:center">未声明/初始化对象 (没有属性)</td>
</tr>
<tr>
<td style="text-align:center">UnboundLocalError</td>
<td style="text-align:center">访问未初始化的本地变量</td>
</tr>
<tr>
<td style="text-align:center">ReferenceError</td>
<td style="text-align:center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td>
</tr>
<tr>
<td style="text-align:center">RuntimeError</td>
<td style="text-align:center">一般的运行时错误</td>
</tr>
<tr>
<td style="text-align:center">NotImplementedError</td>
<td style="text-align:center">尚未实现的方法</td>
</tr>
<tr>
<td style="text-align:center">SyntaxError</td>
<td style="text-align:center">Python 语法错误</td>
</tr>
<tr>
<td style="text-align:center">IndentationError</td>
<td style="text-align:center">缩进错误</td>
</tr>
<tr>
<td style="text-align:center">TabError</td>
<td style="text-align:center">Tab 和空格混用</td>
</tr>
<tr>
<td style="text-align:center">SystemError</td>
<td style="text-align:center">一般的解释器系统错误</td>
</tr>
<tr>
<td style="text-align:center">TypeError</td>
<td style="text-align:center">对类型无效的操作</td>
</tr>
<tr>
<td style="text-align:center">ValueError</td>
<td style="text-align:center">传入无效的参数</td>
</tr>
<tr>
<td style="text-align:center">UnicodeError</td>
<td style="text-align:center">Unicode 相关的错误</td>
</tr>
<tr>
<td style="text-align:center">UnicodeDecodeError</td>
<td style="text-align:center">Unicode 解码时的错误</td>
</tr>
<tr>
<td style="text-align:center">UnicodeEncodeError</td>
<td style="text-align:center">Unicode 编码时错误</td>
</tr>
<tr>
<td style="text-align:center">UnicodeTranslateError</td>
<td style="text-align:center">Unicode 转换时错误</td>
</tr>
<tr>
<td style="text-align:center">Warning</td>
<td style="text-align:center">警告的基类</td>
</tr>
<tr>
<td style="text-align:center">DeprecationWarning</td>
<td style="text-align:center">关于被弃用的特征的警告</td>
</tr>
<tr>
<td style="text-align:center">FutureWarning</td>
<td style="text-align:center">关于构造将来语义会有改变的警告</td>
</tr>
<tr>
<td style="text-align:center">OverflowWarning</td>
<td style="text-align:center">旧的关于自动提升为长整型(long)的警告</td>
</tr>
<tr>
<td style="text-align:center">PendingDeprecationWarning</td>
<td style="text-align:center">关于特性将会被废弃的警告</td>
</tr>
<tr>
<td style="text-align:center">RuntimeWarning</td>
<td style="text-align:center">可疑的运行时行为(runtime behavior)的警告</td>
</tr>
<tr>
<td style="text-align:center">SyntaxWarning</td>
<td style="text-align:center">可疑的语法的警告</td>
</tr>
<tr>
<td style="text-align:center">UserWarning</td>
<td style="text-align:center">用户代码生成的警告</td>
</tr>
</tbody>
</table>
</div>
<p><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>单元测试 (Unittest)</strong><br>代码调试是编写代码的至关重要的一环。尤其是你要写一些功能服务给别人用的时候，免不了要先自测有没有问题。<strong><font color="red">保证我写的，真的是我想要的。</font></strong><br><strong><font color="blue" size="3">使用场景:</font></strong> <code>程序的代码量小，且项目功能之间无耦合关系时，可运行程序打断点进行debug。但是当处理的代码量比较大，牵扯到的资源相对多，我很多时候并不知道哪里会不会有错误。 所以这种情况非常依赖于测试。让自动化测试帮我处理任何改动可能带来的问题。</code></p>
<p><strong><font color="red">unittest 规范：</font></strong>首先 unittest 不会被其他人使用到，纯粹是你自己为了验证自己写的代码有没有问题的方式。一般般采用 XXXX.py与XXXX_test.py的形成进行单元测试。另外，你可以按照 unittest 当中的 case 为蓝本，去完善你原函数的功能。 就好像有了一个目标，你要为了这个目标去开发功能一样。这样就可以先写 unittest 当中的 case，比如下面，我不会先写 my_func 里面的内容，而是先把我的测试和要验收的指标写好。然后后面我再开发功能。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># main.py  主文件用于编写程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_func1</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> a == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_func2</span>(<span class="params">b</span>):</span><br><span class="line">    <span class="keyword">if</span> b != <span class="string">"yes"</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"you can only say yes!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># main_test.py  测试文件用于编写程序     </span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> main  <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(unittest.TestCase):       <span class="comment"># 固定格式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_something1</span>(<span class="params">self</span>):             <span class="comment"># 可自定义函数功能名称</span></span><br><span class="line">        self.assertEqual(<span class="number">2</span>, m.my_func1(<span class="number">1</span>)) <span class="comment"># 测试功能</span></span><br><span class="line">        self.assertEqual(<span class="number">3</span>, m.my_func1(-<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">100</span>, <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">or</span> i == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.assertEqual(<span class="number">1</span>, m.my_func1(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_something2</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertTrue(m.my_func2(<span class="string">"yes"</span>))</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(ValueError):</span><br><span class="line">            m.my_func2(<span class="string">"nononono"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line">    <span class="comment"># 当仅仅想测试某一个函数功能时，定义一个 suite 替换 unittest.main()</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(MyTestCase(<span class="string">'test_something1'</span>))</span><br><span class="line">    unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></tbody></table></figure><p></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">assert</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertEqual(a, b)</td>
<td style="text-align:center">a == b</td>
</tr>
<tr>
<td style="text-align:center">assertNotEqual(a, b)</td>
<td style="text-align:center">a != b</td>
</tr>
<tr>
<td style="text-align:center">assertTrue(condition)</td>
<td style="text-align:center">condition 是不是 True</td>
</tr>
<tr>
<td style="text-align:center">assertFalse(condition)</td>
<td style="text-align:center">condition 是不是 False</td>
</tr>
<tr>
<td style="text-align:center">assertGreater(a, b)</td>
<td style="text-align:center">a &gt; b</td>
</tr>
<tr>
<td style="text-align:center">assertGreaterThan(a, b)</td>
<td style="text-align:center">a &gt;= b</td>
</tr>
<tr>
<td style="text-align:center">assertLess(a, b)</td>
<td style="text-align:center">a &lt; b</td>
</tr>
<tr>
<td style="text-align:center">assertLessEqual(a, b)</td>
<td style="text-align:center">a &lt;= b</td>
</tr>
<tr>
<td style="text-align:center">assertIs(a, b)</td>
<td style="text-align:center">a is b，a 和 b 是不是同一对象</td>
</tr>
<tr>
<td style="text-align:center">assertIsNot(a, b)</td>
<td style="text-align:center">a is not b，a 和 b 是不是不同对象</td>
</tr>
<tr>
<td style="text-align:center">assertIsNone(a)</td>
<td style="text-align:center">a is None，a 是不是 None</td>
</tr>
<tr>
<td style="text-align:center">assertIsNotNone(a)</td>
<td style="text-align:center">a is not None，a 不是 None？</td>
</tr>
<tr>
<td style="text-align:center">assertIn(a, b)</td>
<td style="text-align:center">a in b, a 在 b 里面？</td>
</tr>
<tr>
<td style="text-align:center">assertNotIn(a, b)</td>
<td style="text-align:center">a not in b，a 不在 b 里？</td>
</tr>
<tr>
<td style="text-align:center">assertRaises(err)</td>
<td style="text-align:center">通常和 with 一起用，判断 with 里的功能是否会报错</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-3-生成器与装饰器"><a href="#2-3-生成器与装饰器" class="headerlink" title="2.3 生成器与装饰器"></a>2.3 生成器与装饰器</h3><p><strong>生成器 Generator</strong>，一种占用更小内存的方式处理循环迭代，可以说生成器就是为循环设计的。生成器是一种优化代码程序节省占用内存的方法，如果当你的循环内存不足时，或者运行很慢时，生成器是你需要考虑的。</p>
<blockquote>
<p>在循环的时候，我们的目的是为了每次循环拿到一些特定数据，然后为这些数据做处理。但是无可避免的会在内存中记录这些数值， 当需要记录的数值很多的时候，我们的内存可能就吃不消了。而生成器就是用来现用现存的<br>，我们只在需要这个数据的时候生成它，生成完了我就不用了，也不需要记录。这种时候将会节约我很多内存的需求。<br></p><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">need_return</span>():</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"我要扔出去一个 item=%d 了"</span> % item)</span><br><span class="line">            <span class="keyword">yield</span> item  <span class="comment"># 这里就会返回给下面的 for 循环</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"我又回到里面了"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> need_return():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"我在外面接到了一个 item=%d\n"</span> % i)</span><br><span class="line">&gt;&gt;</span><br><span class="line"><span class="comment">#我要扔出去一个 item=0 了</span></span><br><span class="line"><span class="comment">#我在外面接到了一个 item=0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#我又回到里面了</span></span><br><span class="line"><span class="comment">#我要扔出去一个 item=2 了</span></span><br><span class="line"><span class="comment">#我在外面接到了一个 item=2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#我又回到里面了</span></span><br><span class="line"><span class="comment">#我要扔出去一个 item=4 了</span></span><br><span class="line"><span class="comment">#我在外面接到了一个 item=4</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#我又回到里面了</span></span><br></pre></td></tr></tbody></table></figure><br>定义生成器类<br>用一个 class 也是可以表示一个迭代器，生成器的。 如果我们将上面的逻辑转化成 <code>class</code>，这个 class 可能相对比较复杂，但是也意味着你可以有更多设置和控制发生在这个 class 里面。 里面我们申明了用于生成器的两个 method，__iter__ 和 __next__。<p></p>
</blockquote>
<p>__iter__ 的意思是，当我在外面 for 循环进行迭代时，我返回什么？在下面例子中，我就把自己这个 class 本身返回回去，继续让自己做迭代就好了。</p>
<p>__next__ 的意思是每次迭代的时候，我的函数会放出来什么元素。下面的功能中实现的就是放出来一个被计算过的 item 元素。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NeedReturn</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, init_value=<span class="number">0</span></span>):</span><br><span class="line">        self.tmp = init_value</span><br><span class="line">        self.item = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.item == self.tmp:</span><br><span class="line">                self.tmp *= <span class="number">2</span></span><br><span class="line">                <span class="keyword">return</span> self.item  % 等价于<span class="keyword">yield</span></span><br><span class="line">            self.item += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.item == <span class="number">300</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> NeedReturn(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&gt;&gt;</span><br><span class="line"><span class="comment">#10</span></span><br><span class="line"><span class="comment">#20</span></span><br><span class="line"><span class="comment">#40</span></span><br><span class="line"><span class="comment">#80</span></span><br><span class="line"><span class="comment">#160</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p><strong>装饰器 Decorator</strong> 它是一个装饰 Python Function 的东西。 Function 为什么要被装饰？那就是我们想为这个 Function 做些额外的事情。但是只为一个 Function 做这件事，那我们还不如直接改掉这个 Function，让它直接干这件事就好了。 Decorator 的好处就是，我们可以给批量的 Function 都做这件事。当有一批 Function 都要做些前置或者后置的工作，我们可以统一给他们装修，用一个装饰器统一处理从而减轻你的开发量，特别是针对于不同 function，要做同样的前置处理或后置处理的时候。</p>
<blockquote>
<p>比如数据库的处理，来了一条数据，我先要验证这个数据的准确性，然后进行个性化 function 的处理，最后将加工后的数据写入数据库。<br>网页个人页的鉴权，用户每一个点击，我都先需要鉴权，才能做后续不同的 function。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">authorization</span>(<span class="params">fn</span>):  <span class="comment">#authorization 与@authorization一致即可</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_and_do</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="keyword">if</span> name != <span class="string">"hm"</span>:   <span class="comment"># 鉴权</span></span><br><span class="line">            <span class="built_in">print</span>(name + <span class="string">" has no right!"</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        res = fn(name)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> check_and_do  <span class="comment">#返回值check_and_do与函数功能check_and_do一致即可</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@authorization   </span><span class="comment">#装饰器格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name+<span class="string">" outer1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@authorization</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name+<span class="string">" outer2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@authorization</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer3</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name+<span class="string">" outer3"</span>)</span><br><span class="line"></span><br><span class="line">outer1(<span class="string">"hm"</span>)</span><br><span class="line">outer2(<span class="string">"hmm"</span>)</span><br><span class="line">outer3(<span class="string">"hm"</span>)</span><br><span class="line">&gt;&gt;</span><br><span class="line"><span class="comment">#hm outer1</span></span><br><span class="line"><span class="comment">#hmm has no right!</span></span><br><span class="line"><span class="comment">#hm outer3</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</blockquote>
<h3 id="2-4-工程问题编程思路"><a href="#2-4-工程问题编程思路" class="headerlink" title="2.4 工程问题编程思路"></a>2.4 工程问题编程思路</h3><p><strong>问题聚焦：</strong> 我们面临一个什么具体问题需要进行解决，最终简化问题提取关键核心点（实际存在并且是有研究或者工程应用价值）<br><strong>产品定位：</strong> 为解决此问题我们需要做什么，实现什么功能来创造价值。</p>
<p><strong>程序设计:</strong> 梳理需要实现的各个模块功能间的逻辑关系，形成模块-类-功能的编程架构；定制解决方案系统设计功能的开发，尽可能的成系统编程、可复用代码从而优化编程架构。<br><strong>程序开发:</strong> 基于形成的模块-类-功能的编程架构进行具体开发,并根据开发过程中遇到的问题不断完善流程和克服问题。</p>
<hr>
<h2 id="3-python-文件数据处理"><a href="#3-python-文件数据处理" class="headerlink" title="3. python 文件数据处理"></a>3. python 文件数据处理</h2><h3 id="3-1文件数据读写"><a href="#3-1文件数据读写" class="headerlink" title="3.1文件数据读写"></a>3.1文件数据读写</h3><h4 id="3-1-1-基础读写"><a href="#3-1-1-基础读写" class="headerlink" title="3.1.1 基础读写"></a>3.1.1 基础读写</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># with结构（将文件的打开和关闭嵌入到了一个 with 架构中不用担心忘记关闭文件）</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"new_file2.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"some text...\n 2nd line\n"</span>)         <span class="comment"># 在文件里写入</span></span><br><span class="line">    f.writelines([<span class="string">"some text for file2...\n"</span>, <span class="string">"2nd line\n"</span>])</span><br><span class="line">    <span class="comment"># f.writelines与f.write等价，但必须在元素末尾加 `\n`来换行不然多出来是黏连的。</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"new_file2.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())        <span class="comment"># 在文件里读取</span></span><br><span class="line">    f.seek(<span class="number">0</span>)       <span class="comment"># 将开始读的位置从写入的最后位置调到开头</span></span><br><span class="line">    <span class="built_in">print</span>(f.readlines())   <span class="comment"># 与f.read()等价</span></span><br><span class="line">    f.seek(<span class="number">0</span>)       </span><br><span class="line">    <span class="built_in">print</span>(f.readline())  <span class="comment">#读取当前行，取代一次性全部读取，不让内存被一次性占满。</span></span><br><span class="line"><span class="comment"># 注：f.read()和f.readlines()使用后指针移到最后一行开始位置；</span></span><br><span class="line"><span class="comment">#     f.readline()使用后指针自动移到下一行开始位置。</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 编码格式与中文乱码</span></span><br><span class="line"><span class="comment"># 按二进制 binary读写时 “wb”,"rb", </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"chinese.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"这是中文的，this is Chinese"</span>)<span class="comment"># 报错</span></span><br><span class="line">    f.write(<span class="string">"这是中文的，this is Chinese"</span>.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment"># 写入时将string → a bytes-like object 并按utf-8格式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"chinese.txt"</span>, <span class="string">"rb"</span>, ) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># 读取时将a bytes-like object → string 按utf-8格式  </span></span><br><span class="line">（或者）</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"chinese.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span> ) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())  </span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">MODE</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">（创建）写文本</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">读文本，文件不存在会报错</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">在文本最后添加</td>
</tr>
<tr>
<td style="text-align:center">wb</td>
<td style="text-align:center">写二进制 binary</td>
</tr>
<tr>
<td style="text-align:center">rb</td>
<td style="text-align:center">读二进制 binary</td>
</tr>
<tr>
<td style="text-align:center">ab</td>
<td style="text-align:center">添加二进制</td>
</tr>
<tr>
<td style="text-align:center">w+</td>
<td style="text-align:center"><strong>又可以读又可以（创建）写</strong></td>
</tr>
<tr>
<td style="text-align:center">r+</td>
<td style="text-align:center"><strong>又可以读又可以写, 文件不存在会报错</strong></td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:center">可读写，在文本最后添加</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">创建</td>
</tr>
</tbody>
</table>
</div>
<h4 id="3-1-2-Numpy库中的数据读写"><a href="#3-1-2-Numpy库中的数据读写" class="headerlink" title="3.1.2 Numpy库中的数据读写"></a>3.1.2 Numpy库中的数据读写</h4><h4 id="3-1-3-Panda库中的数据读写"><a href="#3-1-3-Panda库中的数据读写" class="headerlink" title="3.1.3 Panda库中的数据读写"></a>3.1.3 Panda库中的数据读写</h4><h3 id="3-2文件目录管理（OS库）"><a href="#3-2文件目录管理（OS库）" class="headerlink" title="3.2文件目录管理（OS库）"></a>3.2文件目录管理（OS库）</h3><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"当前目录："</span>, os.getcwd())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"当前目录里有什么："</span>, os.listdir())</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个 project 的文件夹其中exist_ok=True 当project存在时不报错。（默认为False）</span></span><br><span class="line">os.makedirs(<span class="string">"user"</span>, exist_ok=<span class="literal">True</span>) <span class="comment"># 创建Dictionary文件夹</span></span><br><span class="line"><span class="comment"># 用户注册</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">"user/hm"</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user exist"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    os.makedirs(<span class="string">"user/hm"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user created"</span>)</span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">"user"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户注销</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">"user/hm"</span>):</span><br><span class="line">    os.removedirs(<span class="string">"user/hm"</span>)  <span class="comment">#只能删除文件夹为空的文件夹</span></span><br><span class="line">    <span class="comment"># 注意 shutil 库太强大了，它会清空整个目录防止误删，防止误删，防止误删！</span></span><br><span class="line">    shutil.rmtree(<span class="string">"user/mofan"</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user removed"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user not exist"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户更名</span></span><br><span class="line">os.rename(<span class="string">"user/hm"</span>, <span class="string">"user/hm_new"</span>)</span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">"user"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件目录多种检验(os.path)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"user/hm/a.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"nothing"</span>)</span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">"user/hm/a.txt"</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">"user/hm/a.txt"</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">"user/hm/a.txt"</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">"user/hm"</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件的复制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">path</span>):</span><br><span class="line">    dir_name, filename = os.path.split(path)</span><br><span class="line">    new_filename = <span class="string">"new2_"</span> + filename    <span class="comment"># 新文件名</span></span><br><span class="line">    new_path = os.path.join(dir_name, new_filename) <span class="comment"># 目录重组</span></span><br><span class="line">    shutil.copy2(path, new_path)   <span class="comment"># 复制文件</span></span><br><span class="line">    <span class="keyword">return</span> os.path.isfile(new_path), new_path</span><br><span class="line">copied, new_path = copy(<span class="string">"user/hm/a.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> copied:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"copied to:"</span>, new_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"copy failed"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><strong>（感性认识）Dictionary和package的使用，存储资源等不需要执行诸多种类的程序时采用Dictionary 否则用package</strong></p>
<blockquote>
<p> Dictionary在pycharm中是一个文件夹目录，放置资源文件，对应于在进行JavaWeb开发时用于放置css/js文件的目录，或者说在进行物体识别时，用来存储背景图像的文件夹。该文件夹其中并不包含_ _ init.py_ _文件。<br> Python package 包文件夹而言，与Dictionary不同之处在于其会自动创建_ _ init.py_ _ 文件。其包括一组模块和一个 _ _ init.py_ _ 文件。该包的使用与Python的import机制有关，这关乎到你的哪些.py文件是对外可访问的。有些时候，如果一个包下有很多模块，在调用方import如此多模块是很费事，且不优雅的，此时可以通过修改 _ _ init_ _.py来完成该任务。<br>&nbsp;</p>
</blockquote>
<h3 id="3-3正则表达式匹配-未完成"><a href="#3-3正则表达式匹配-未完成" class="headerlink" title="3.3正则表达式匹配(未完成)"></a>3.3正则表达式匹配(未完成)</h3><p>  在文件、文字查找、匹配、替换、处理时，少不了要根据特定规则来处理对应文字的情况。 正则表达式 Regular Expression（regex —— <strong>re库</strong>）就是通过用一些规则或者模板来帮你找到文字，替换文字的工具。</p>
<p><strong>正则库功能表</strong><br>|     功能      |                                           说明                                           |                                             举例                                             |<br>| :—————-: | :———————————————————————————————————————————: | :—————————————————————————————————————————————: |<br>|  re.search()  |                       扫描查找整个字符串，<strong>找到第一个模式匹配</strong>的                       |                           re.search(r”run”, I run to you) &gt; ‘run’                            |<br>|  re.match()   | 从字符的<strong>最开头匹配，找到第一个模式匹配</strong>的即使用 re.M 多行匹配，也是从最最开头开始匹配 |                            re.match(r”run”, I run to you) &gt; None                             |<br>| re.findall()  |                         <strong>返回一个不重复的 pattern 的匹配列表</strong>                          |              re.findall(rr[ua]n, I run to you. you ran to him) &gt; [‘run’, ‘ran’]              |<br>| re.finditer() |                         和 findall 一样，只是用迭代器的方式使用                          |               for item in re.finditer(rr[ua]n, I run to you. you ran to him):                |<br>|  re.split()   |                                     用正则分开字符串                                     |     re.split(rr[ua]n, I run to you. you ran to him) &gt; [‘I ‘, ‘ to you. you ‘, ‘ to him’]     |<br>|   re.sub()    |                                      用正则替换字符                                      |    re.sub(rr[ua]n, jump, I run to you. you ran to him) &gt; ‘I jump to you. you jump to him’    |<br>|   re.subn()   |                            和 sub 一样，额外返回一个替代次数                             | re.subn(rr[ua]n, jump, I run to you. you ran to him) &gt; (‘I jump to you. you jump to him’, 2) |</p>
<p><strong>通用匹配方式表</strong><br>| 特定匹配标识 |                 表达含义                 |                         实际范围                          |<br>| :—————: | :———————————————————: | :———————————————————————————-: |<br>|      \d      |                 任何数字                 |                           [0-9]                           |<br>|      \D      |                不是数字的                |                                                           |<br>|      \s      |               任何空白字符               |                       [ \t\n\r\f\v]                       |<br>|      \S      |              空白字符以外的              |                                                           |<br>|    <strong>\w</strong>    |         任何大小写字母,数字和 _          |                       [a-zA-Z0-9_]                        |<br>|      \W      |                \w 以外的                 |                                                           |<br>|      \b      |             匹配一个单词边界             | 比如 er\b 可以匹配 never 中的 er，但不能匹配 verb 中的 er |<br>|      \B      |              匹配非单词边界              |  比如 er\B 能匹配 verb 中的 er，但不能匹配 never 中的 er  |<br>|      \\      |                强制匹配 \                |                                                           |<br>|    <strong>.</strong>     |          匹配任何字符 (除了 \n)          |                                                           |<br>|    <strong>?</strong>     |            前面的模式可有可无            |                                                           |<br>|    <strong>*</strong>     |              重复零次或多次              |                                                           |<br>|    <strong>+</strong>     |              重复一次或多次              |                                                           |<br>|    {n,m}     |              重复 n 至 m 次              |                                                           |<br>|     {n}      |                重复 n 次                 |                                                           |<br>|    <strong>+?</strong>    |          非贪婪，最小方式匹配 +          |                                                           |<br>|      <em>?      |          非贪婪，最小方式匹配 </em>          |                                                           |<br>|      ??      |          非贪婪，最小方式匹配 ?          |                                                           |<br>|      ^       | 匹配一行开头，在 re.M 下，每行开头都匹配 |                                                           |<br>|      $       | 匹配一行结尾，在 re.M 下，每行结尾都匹配 |                                                           |<br>|      \A      |  匹配最开始，在 re.M 下，也从文本最开始  |                                                           |<br>|      \B      |  匹配最结尾，在 re.M 下，也从文本最结尾  |                                                           |</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># （举例说明）注册管理，验证邮箱是否有效。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 先compile解析好一个正则 pattern，然后直接用这个 pattern 去执行查找。</span></span><br><span class="line"><span class="comment">#当需要循环查找时将compile放在循环前，search放在循环内执行从而节省执行时间</span></span><br><span class="line">ptn = re.<span class="built_in">compile</span>(<span class="string">r"\w+?@\w+?\.com"</span>)</span><br><span class="line"><span class="comment"># “\w ” 表示任何大小写字母,数字和 _ “+?”表示前面的模式至少匹配一次。</span></span><br><span class="line"><span class="comment"># 当识别 “@” 的时候做其前面的非贪婪模式匹配“\.”表示.的字面含义。如果只有“.”表示匹配任何字符。</span></span><br><span class="line">matched = ptn.search(<span class="string">"huangming98@163.com"</span>)</span><br><span class="line"><span class="built_in">print</span>(matched)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将compile解析和模式查找放在一条语句里。</span></span><br><span class="line">matched = re.search(<span class="string">r"\w+?@\w+?\.com"</span>, <span class="string">"huangming98@163.com"</span>) </span><br><span class="line"><span class="comment">#用 r"xxx" 来写一个 pattern，r 代表原生字符串，当成一个规则来记住所写 pattern 时，都需写上一个 r 在前面。</span></span><br><span class="line"><span class="built_in">print</span>( matched)</span><br><span class="line"><span class="comment"># Ans: &lt;re.Match object; span=(0, 19), match='huangming98@163.com'&gt;</span></span><br><span class="line"><span class="comment"># span=(0, 19)代表着在原始字符串中，我们找到的 pattern 是从哪一位到哪一位</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#同时满足多种条件的pattern写法</span></span><br><span class="line">re.search(<span class="string">r"ran|run"</span>, <span class="string">"I run to you"</span>)</span><br><span class="line">re.search(<span class="string">r"r[au]n"</span>, <span class="string">"I run to you"</span>)</span><br><span class="line">re.search(<span class="string">r"f(ou|i)nd"</span>, <span class="string">"I found you"</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#中文识别</span></span><br><span class="line">re.search(<span class="string">r"不.*?爱"</span>, <span class="string">"我不是很爱你"</span>)</span><br><span class="line"><span class="comment">#&lt;re.Match object; span=(1, 5), match='不是很爱'&gt;</span></span><br><span class="line">re.search(<span class="string">r"[\u4e00-\u9fa5]+"</span>, <span class="string">"我爱Python是的。"</span>)</span><br><span class="line"><span class="comment">#&lt;re.Match object; span=(0, 2), match='我爱'&gt;</span></span><br><span class="line">re.search(<span class="string">r"[\u4e00-\u9fa5！？。，￥【】「」]+"</span>, <span class="string">"我爱你，是的！"</span>)</span><br><span class="line"><span class="comment">#&lt;re.Match object; span=(0, 7), match='我爱你，是的！'&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>在模式中获取特定信息</strong><br>我们能用 <code>group</code> 和<code>()</code>获取到特定位置的信息。只要我们在正则表达中，加入一个 <code>()</code> 选定要截取返回的位置， 他就直接返回括号里的内容。<br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## re.finditer提供了 file.group(0) 这种全匹配的信息，而re.findall未提供全匹配信息。</span></span><br><span class="line">string = <span class="string">"I have 2021-02-01.jpg, 2021-02-02.jpg, 2021-02-03.jpg"</span></span><br><span class="line"><span class="keyword">match</span> = re.finditer(<span class="string">r"(\d+?)-(\d+?)-(\d+?)\.jpg"</span>, string)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"matched string:"</span>, file.group(<span class="number">0</span>), <span class="string">",year:"</span>, file.group(<span class="number">1</span>),</span><br><span class="line">    <span class="string">", month:"</span>, file.group(<span class="number">2</span>), <span class="string">", day:"</span>, file.group(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># &gt; matched string: 2021-02-01.jpg ,year: 2021 , month: 02 , day: 01</span></span><br><span class="line"><span class="comment"># &gt; matched string: 2021-02-02.jpg ,year: 2021 , month: 02 , day: 02</span></span><br><span class="line"><span class="comment"># &gt; matched string: 2021-02-03.jpg ,year: 2021 , month: 02 , day: 03</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> = re.findall(<span class="string">r"(\d+?)-(\d+?)-(\d+?)\.jpg"</span>, string)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"year:"</span>, file[<span class="number">0</span>], <span class="string">", month:"</span>, file[<span class="number">1</span>], <span class="string">", day:"</span>, file[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># &gt; year: 2021 , month: 02 , day: 01</span></span><br><span class="line"><span class="comment"># &gt; year: 2021 , month: 02 , day: 02</span></span><br><span class="line"><span class="comment"># &gt; year: 2021 , month: 02 , day: 03</span></span><br></pre></td></tr></tbody></table></figure><br><strong>名字索引</strong><br>有时候 <code>group</code> 的信息太多了，括号写得太多，依靠数字位置索引识别信息容易错配？此时，我们还能用一个名字来索引匹配好的字段， 然后用 group(“索引”) 的方式获取到对应的片段。注意，<code>re.findall</code> 不提供名字索引的方法， <code>re.search</code>或者 <code>re.finditer</code> 可以用名字索引。为了索引，我们需要在括号中写上 <code>?P&lt;索引名&gt;</code> 这种模式。<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> = re.finditer(<span class="string">r"(?P&lt;y&gt;\d+?)-(?P&lt;m&gt;\d+?)-(?P&lt;d&gt;\d+?)\.jpg"</span>, string)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"matched string:"</span>, file.group(<span class="number">0</span>), </span><br><span class="line">        <span class="string">", year:"</span>, file.group(<span class="string">"y"</span>), </span><br><span class="line">        <span class="string">", month:"</span>, file.group(<span class="string">"m"</span>), </span><br><span class="line">        <span class="string">", day:"</span>, file.group(<span class="string">"d"</span>))</span><br></pre></td></tr></tbody></table></figure><br><strong>多模式匹配</strong><br>在正则中还有一些特别的 <code>flags</code>，可以在 <strong><code>re.search</code>,<code>re.match()</code>,<code>re.findall()</code></strong> 等功能中使用。 主要目的也是方便我们编写正则，和用更简单的方法处理更复杂的表达式。<br>| 模式  |        全称        |                               说明                               |<br>| :—-: | :————————: | :———————————————————————————————: |<br>| re.I  |   re.IGNORECASE    |                            忽略大小写                            |<br>| re.M  |    re.MULTILINE    |                   多行模式，改变’^’和’$’的行为                   |<br>| re.S  |     re.DOTALL      |       点任意匹配模式，改变’.’的行为, 使”.“可以匹配任意字符       |<br>| re.L  |     re.LOCALE      |        使预定字符类 \w \W \b \B \s \S 取决于当前区域设定         |<br>| re.U  |     re.UNICODE     | 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性 |<br>| re.X  | re.VERBOSE详细模式 |  这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。  |<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用 ^ran 固定样式开头，我是匹配不到第二行的 ran to you 的，所以我们得加上一个 re.M flag。 </span></span><br><span class="line"><span class="comment"># 注意我们提到过的 re.search() 和 re.match() 不一样，re.match() 是不管有没有 re.M flag，我的匹配都是按照最头上开始匹配。 </span></span><br><span class="line"><span class="comment">#所以在下面的实验中，re.match() 匹配不到任何东西。</span></span><br><span class="line">ptn = <span class="string">r"^ran"</span></span><br><span class="line">string = <span class="string">"""I</span></span><br><span class="line"><span class="string">ran to you"""</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"without re.M:"</span>, re.search(ptn, string))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"with re.M:"</span>, re.search(ptn, string, flags=re.M))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"with re.M and match:"</span>, re.<span class="keyword">match</span>(ptn, string, flags=re.M))</span><br><span class="line"><span class="comment"># &gt; without re.M: None</span></span><br><span class="line"><span class="comment"># &gt; with re.M: &lt;re.Match object; span=(2, 5), match='ran'&gt;</span></span><br><span class="line"><span class="comment"># &gt; with re.M and match: None</span></span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你想用多种 flags，也是可以的，</span></span><br><span class="line"><span class="comment">#&gt; 比如我想同时用 re.M, re.I，你只需要这样书写re.M|re.I：</span></span><br><span class="line">ptn = <span class="string">r"^ran"</span></span><br><span class="line">string = <span class="string">"""I</span></span><br><span class="line"><span class="string">Ran to you"""</span></span><br><span class="line"><span class="built_in">print</span>(re.search(ptn, string, flags=re.M|re.I))</span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">r"(?im)^ran"</span>, string))</span><br><span class="line">re.search(<span class="string">r"(?im)^ran"</span>, string)</span><br><span class="line"><span class="comment"># &gt; &lt;re.Match object; span=(2, 5), match='Ran'&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>小案例<br>这个问题就是针对文件夹内所有的文件，将里面提到的 huangming98.github.io 改成 huangm.cn。<br>首先需要简化问题，简化出来的话，其实就是要有三个步骤。<p></p>
<ol>
<li>遍历所有的文本文件</li>
<li>读取文件中文本字段</li>
<li>替换掉特定字段</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#找到所有的文本并遍历</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">"files"</span>):</span><br><span class="line">    file_path = os.path.join(<span class="string">"files"</span>, filename)</span><br><span class="line">    <span class="comment">#读取文件中文本字段</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">"r"</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        string = f1.read()</span><br><span class="line">        <span class="comment">#替换掉特定字段</span></span><br><span class="line">        new_string = re.sub(<span class="string">r"huangming98.github.io"</span>, <span class="string">"huangm.cn"</span>, string)</span><br><span class="line">        <span class="comment">#测试验证；将原文本替换过的文字拷贝到新文件中，原文件不改变</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(<span class="string">"files"</span>, <span class="string">"new_"</span>+filename), <span class="string">"w"</span>) <span class="keyword">as</span> f2:</span><br><span class="line">            f2.write(new_string)</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断操作是否正确</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">"files"</span>):</span><br><span class="line">    <span class="keyword">if</span> filename.startswith(<span class="string">"new_"</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    file_path = os.path.join(<span class="string">"files"</span>, <span class="string">"new_"</span>+filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(file_path, <span class="string">": "</span>, f.read())</span><br></pre></td></tr></tbody></table></figure>
<p>&nbsp;</p>
<h3 id="3-3序列化数据传输（Json-and-Pickle）"><a href="#3-3序列化数据传输（Json-and-Pickle）" class="headerlink" title="3.3序列化数据传输（Json and Pickle）"></a>3.3序列化数据传输（Json and Pickle）</h3><p>  序列化（Serialization）：把不同类型的数据打包保存在电脑硬盘中，或者用于数据的传输（云服务）。</p>
<p><strong>Pickle</strong><br></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">data = {<span class="string">"filename"</span>: <span class="string">"f1.txt"</span>, <span class="string">"create_time"</span>: <span class="string">"today"</span>, <span class="string">"size"</span>: <span class="number">111</span>}</span><br><span class="line">    pickle.dumps(datas)           <span class="comment"># 将python对象编码成Bytes字符串</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"data.pkl"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(data, f)           <span class="comment"># pickle打包到文件data.pkl里</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"data.pkl"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = pickle.load(f)        <span class="comment"># 用 open 的方式把文件都读出来，然后再用 pickle 对其解析</span></span><br><span class="line">os.listdir()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></tbody></table></figure><br><strong>Json</strong><br>  JSON （JavaScript Object Notation）是用于存储和交换数据的语法。最初是用 JavaScript 对象表示法编写的文本，但随后成为了一种常见格式，被包括Python在内的众多语言采用。<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = {<span class="string">"filename"</span>: <span class="string">"f1.txt"</span>, <span class="string">"create_time"</span>: <span class="string">"today"</span>, <span class="string">"size"</span>: <span class="number">111</span>}</span><br><span class="line">    json.dumps(data)             <span class="comment"># 将python对象编码成json字符串（字符串）</span></span><br><span class="line">    json.loads(data)             <span class="comment"># 将Json字符串解码成python对象</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"data.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)             <span class="comment"># 将python中的对象转化成json储存到文件f中（文件流）</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"直接当纯文本读："</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"data.json"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"用 json 加载了读："</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"data.json"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    new_data = json.load(f)        <span class="comment"># 加载json格式数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"字典读取："</span>, new_data[<span class="string">"filename"</span>])</span><br></pre></td></tr></tbody></table></figure><br>json.dumps()的一些参数 <strong>（重点）</strong><br>  因为dumps编码以后的json格式输出比较的紧凑，如果不止一行看起来就不是特别好看，就像一堆乱码似的。所以，就推出了一些可选参数来让json码的可读性更高。<br><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">json.dumps(obj, sort_keys=<span class="literal">False</span>, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, </span><br><span class="line">allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, </span><br><span class="line">encoding=<span class="string">"utf-8"</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">obj:就是你要转化成json的对象。</span><br><span class="line">sort_keys =<span class="literal">True</span>:是告诉编码器按照字典排序(a到z)输出。如果是字典类型的python对象，就把关键字按照字典排序。</span><br><span class="line">indent:参数根据数据格式缩进显示，读起来更加清晰。</span><br><span class="line">        {<span class="string">"name"</span>: <span class="string">"\u4f60\u731c"</span>, <span class="string">"age"</span>: <span class="number">19</span>, <span class="string">"city"</span>: <span class="string">"\u56db\u5ddd"</span>} 变为</span><br><span class="line">        {</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"\u4f60\u731c"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="string">"city"</span>: <span class="string">"\u56db\u5ddd"</span></span><br><span class="line">        }</span><br><span class="line">separators=(<span class="string">','</span>,<span class="string">':'</span>):是分隔符的意思，参数意思分别为不同<span class="built_in">dict</span>项之间的分隔符和<span class="built_in">dict</span>项内key和value之间的分隔符，把：和，后面的空格都除去了。</span><br><span class="line">    {<span class="string">"name"</span>: <span class="string">"\u4f60\u731c"</span>, <span class="string">"age"</span>: <span class="number">19</span>, <span class="string">"city"</span>: <span class="string">"\u56db\u5ddd"</span>}</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">"\u4f60\u731c"</span>,<span class="string">"age"</span>:<span class="number">19</span>,<span class="string">"city"</span>:<span class="string">"\u56db\u5ddd"</span>}</span><br><span class="line">skipkeys：默认值是<span class="literal">False</span>，如果<span class="built_in">dict</span>的keys内的数据不是python的基本类型(<span class="built_in">str</span>,unicode,<span class="built_in">int</span>,long,<span class="built_in">float</span>,<span class="built_in">bool</span>,<span class="literal">None</span>)，设置为<span class="literal">False</span>时，就会报TypeError错误。此时设置成<span class="literal">True</span>，则会跳过这类key。</span><br><span class="line">ensure_ascii=<span class="literal">True</span>：默认输出ASCLL码，如果把这个该成<span class="literal">False</span>,就可以输出中文。</span><br><span class="line">check_circular：如果check_circular为false，则跳过对容器类型的循环引用检查，循环引用将导致溢出错误(或更糟的情况)。</span><br><span class="line"></span><br><span class="line">allow_nan：如果allow_nan为假，则ValueError将序列化超出范围的浮点值(nan、inf、-inf)，严格遵守JSON规范，而不是使用JavaScript等价值(nan、Infinity、-Infinity)。</span><br><span class="line"></span><br><span class="line">default：default(obj)是一个函数，它应该返回一个可序列化的obj版本或引发类型错误。默认值只会引发类型错误。</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><strong>Pickle 与 Json 对比如下：</strong><br>|     对比     |            Pickle            |                    Json                     |<br>| :—————: | :—————————————: | :————————————————————-: |<br>|   存储格式   |   Python 特定的 Bytes 格式   | 通用 JSON text 格式，可用于常用的网络通讯中 |<br>|   数据种类   | 类，功能，字典，列表，元组等 |    基本和 Pickle 一样，但不能存类，功能     |<br>| 保存后可读性 |         不能直接阅读         |                 能直接阅读                  |<br>|   跨语言性   |       只能用在 Python        |              可以跨多语言读写               |<br>|   处理时间   |       长（需编码数据）       |               短（不需编码）                |<br>|    安全性    |  不安全（除非你信任数据源）  |                  相对安全                   |</p>
<p>&nbsp;</p>
<h1 id="python-相关连接"><a href="#python-相关连接" class="headerlink" title="python 相关连接"></a>python 相关连接</h1><h2 id="1-python基础"><a href="#1-python基础" class="headerlink" title="1. python基础"></a>1. <a href="https://www.runoob.com/python3/python3-tutorial.html">python基础</a></h2><h2 id="2-python100天"><a href="#2-python100天" class="headerlink" title="2. python100天"></a>2. <a href="https://www.bookstack.cn/read/Python-100-Days/README.md">python100天</a></h2><h2 id="3-虚拟环境配置"><a href="#3-虚拟环境配置" class="headerlink" title="3.虚拟环境配置"></a>3.虚拟环境配置</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">conda create -n rich python=3.7  <span class="comment">#创建环境</span></span><br><span class="line">conda activate rich  <span class="comment">#激活环境</span></span><br><span class="line">conda deactivate rich  <span class="comment">#退出环境</span></span><br><span class="line">conda remove -n rich --all  <span class="comment">#删除环境</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="4-requirements"><a href="#4-requirements" class="headerlink" title="4. requirements"></a>4. requirements</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>
<p>例如<br></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pytest==6.2.5</span><br><span class="line">pytest-json-report==1.4.1</span><br><span class="line">pytest-metadata==1.11.0</span><br><span class="line">pytest-ordering==0.6</span><br><span class="line">PyTestReport==0.2.1</span><br><span class="line">python-dateutil==2.8.2</span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li><a href="https://github.com/liuqian62/loopmark">python图形界面示例</a><h2 id="5-mmdetetion"><a href="#5-mmdetetion" class="headerlink" title="5. mmdetetion"></a>5. mmdetetion</h2></li>
</ul>
<h3 id="5-1-教程"><a href="#5-1-教程" class="headerlink" title="5.1 教程"></a>5.1 教程</h3><ul>
<li><a href="https://blog.csdn.net/qq_16137569/article/details/121316235">博客链接</a></li>
<li><a href="https://github.com/open-mmlab/mmdetection">官网链接</a></li>
<li><a href="https://mmdetection.readthedocs.io/en/latest/">官方文档</a><h3 id="5-2-测试程序用时"><a href="#5-2-测试程序用时" class="headerlink" title="5.2 测试程序用时"></a>5.2 测试程序用时</h3></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python -m torch.distributed.launch --nproc_per_node=1 --master_port=29500 tools/analysis_tools/benchmark.py <span class="variable">$cofig</span> <span class="variable">$checkpoint</span> --launcher pytorch</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-3-分布式训练"><a href="#5-3-分布式训练" class="headerlink" title="5.3 分布式训练"></a>5.3 分布式训练</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Export CUDA_VISIBLE_DEVICES=”<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>”</span><br><span class="line"></span><br><span class="line">CUDA_VISIBLE_DEVICES=”<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>” python -m torch.distributed.launch --nproc_per_node=<span class="number">4</span> tools/train.py $cofig $checkpoint --launcher pytorch</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-4-训练"><a href="#5-4-训练" class="headerlink" title="5.4 训练"></a>5.4 训练</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Export CUDA_VISIBLE_DEVICES=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">CUDA_VISIBLE_DEVICES=<span class="number">2</span> python tools/train.py $cofig $checkpoint --gpus <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-5-测算模型参数量和计算量"><a href="#5-5-测算模型参数量和计算量" class="headerlink" title="5.5 测算模型参数量和计算量"></a>5.5 测算模型参数量和计算量</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">python tools/analysis_tools/get_flops.py ${CONFIG_FILE} [--shape ${INPUT_SHAPE}]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-6-指定GPU运行"><a href="#5-6-指定GPU运行" class="headerlink" title="5.6 指定GPU运行"></a>5.6 指定GPU运行</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">export CUDA_VISIBLE_DEVICES=1 </span><br><span class="line"></span><br><span class="line">CUDA_VISIBLE_DEVICE=1 python xxx.py …</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-7-Git"><a href="#5-7-Git" class="headerlink" title="5.7. Git"></a>5.7. Git</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">git init (初始化本地仓库)</span><br><span class="line">git remote add origin git@github.com:<span class="built_in">open</span>-mmlab/mmdetection.git</span><br><span class="line">git add .  (提交缓存)</span><br><span class="line">git status</span><br><span class="line">git commit -m “   备注   ”</span><br><span class="line"></span><br><span class="line">git pull --rebase origin master (同步)</span><br><span class="line"><span class="keyword">or</span>   git pull + git pull origin master --allow-unrelated-histories 【允许不相关历史提交，并强制合并】</span><br><span class="line">git push -u origin master （推送）</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>冲突</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line"></span><br><span class="line">git rebase --<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">git pull --rebase origin master </span><br><span class="line"></span><br><span class="line">git push origin master</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="6-OpenCV教程"><a href="#6-OpenCV教程" class="headerlink" title="6. OpenCV教程"></a>6. OpenCV教程</h2><ul>
<li><a href="https://woshicver.com/">OpenCV中文官方文档</a></li>
<li><a href="https://opencv.apachecn.org/#/">OpenCV 4.0 中文文档</a></li>
</ul>
<h2 id="7-pyechart"><a href="#7-pyechart" class="headerlink" title="7. pyechart"></a>7. pyechart</h2><ul>
<li><a href="https://gallery.pyecharts.org/#/README">pyechart中文文档</a></li>
<li><a href="https://github.com/pyecharts/pyecharts">pyechart的github地址</a></li>
<li><a href="https://github.com/pyecharts/pyecharts-gallery">pyechart图库</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>集成调度数据集</title>
    <url>/2022/09/16/blog1/</url>
    <content><![CDATA[<h1 id="1-配送-121TTT"><a href="#1-配送-121TTT" class="headerlink" title="1 配送 121TTT"></a>1 配送 121TTT</h1><h2 id="1-1-配送集成ADSAS1"><a href="#1-1-配送集成ADSAS1" class="headerlink" title="1.1 配送集成ADSAS1"></a>1.1 配送集成ADSAS1</h2><p> 简介：生产与配送集成调度是近些年来热门的研究领域。大多数学者认为 <a href="https://sci-hub.wf/10.1287/opre.28.6.1436">(Potts, 1980)</a>是该领域的开篇之作。随着该领域专家学者的不断拓展和深入，集成调度的相关研究得到了空前的发展。各方面的理论和方法也不断被提出，可参照综述文献 <a href="https://sci-hub.wf/10.1287/opre.1080.0688">(Chen, 2010)</a>,<a href="https://sci-hub.wf/10.1016/j.cie.2016.12.010">(Moons et al., 2017)</a>, <a href="https://sci-hub.wf/10.1080/00207543.2020.1762019">(Kumar et al., 2020)</a>进行系统的梳理。</p>
<blockquote>
<p>根据问题特征我们对如下数据集进行简要描述：</p>
<ul>
<li>生产调度：(作业车间调度、流水车间调度（流水线、置换、混流）、分布式车间调度、柔性调度、模糊调度、动态调度 等)</li>
<li>配送调度：(运输问题、车辆路径问题（容量限制、时间窗约束、多行程等））<br>我们所提出的数据集所应用的模型涉及：<br><strong>流水线生产 &amp; 车辆路径问题（考虑容量限制、时间窗约束、多行程）&amp;模糊旅途时间</strong> </li>
</ul>
<hr>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var _prevOnload = window.onload;</span><br><span class="line"></span><br><span class="line">window.onload = function () {</span><br><span class="line">    var switchLang = document.getElementsByClassName("menu-item menu-item-switch-to-chinese")[0];</span><br><span class="line">    switchLang.onclick = function () {</span><br><span class="line">        var href = window.location.href;</span><br><span class="line">        var includesKeywords = href.includes("/homepage/") || href.includes("/home/")|| href.includes("/publications/") || href.includes("/resources/")|| href.includes("/link/")|| href.includes("/archives/")|| href.includes("/Switch to Chinese/");</span><br><span class="line">        if (includesKeywords) {</span><br><span class="line">            window.location.href = href.replace('.cn/', '.cn/cn/');</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        else {</span><br><span class="line">            window.location.href = "https://www.huangm.cn/cn";</span><br><span class="line">        }</span><br><span class="line">        if (typeof (_prevOnload) === 'function') {</span><br><span class="line">            _prevOnload();</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="1-1-配送集成ADSAS1-1"><a href="#1-1-配送集成ADSAS1-1" class="headerlink" title="1.1 配送集成ADSAS1"></a>1.1 配送集成ADSAS1</h2><script type="math/tex; mode=display">
\begin{equation}
 \textcolor{red} {w_{k+1}=w_k-a_k \tilde{g}\left(w_k, \eta_k\right) ,k=1,2,3,\dots}
\end{equation}</script><h3 id="1-1-配送集成ADSAS1-2"><a href="#1-1-配送集成ADSAS1-2" class="headerlink" title="1.1 配送集成ADSAS1"></a>1.1 配送集成ADSAS1</h3><p>This simple example can illustrate why the RM algorithm converges.</p>
<h3 id="1-4配送集成"><a href="#1-4配送集成" class="headerlink" title="1.4配送集成"></a>1.4配送集成</h3><ul>
<li>When $w_k&gt;w^<em>$, we have $g\left(w_k\right)&gt;0$. Then, $w_{k+1}=w_k-a_k g\left(w_k\right)&lt;w_k$. If $a_k g\left(w_k\right)$ is sufficiently small, we have $w^</em>&lt;w_{k+1}&lt;w_k$. As a result, $w_{k+1}$ is closer to $w^*$ than $w_k$.</li>
<li>When $w_k<w^*$, we have $g\left(w_k\right)<0$. then, $w_{k+1}="w_k-a_k" g\left(w_k\right)>w_k$. If $\left|a_k g\left(w_k\right)\right|$ is sufficiently small, we have $w^<em>&gt;w_{k+1}&gt;w_k$. As a result, $w_{k+1}$ is closer to $w^</em>$ than $w_k$.</w^*$,></li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned} 
\tilde{g}(w, \eta) & = w-x \\ 
& =w-x+\mathbb{E}[X] -\mathbb{E}[X] \\
& =(w-\mathbb{E}[X]) + (\mathbb{E}[X]-x)\\
& =g(w)+\eta
\end{aligned}</script><script type="math/tex; mode=display">
\begin{equation}
w_{k+1} = w_k-\alpha_k \textcolor{blue} {\nabla_w f\left(w_k, x_k\right)}, \end{equation}</script><p>where $x_k$ is the sample collected at time step $k$. It relies on stochastic samples ${x_k}$</p>
<ol>
<li><p>Compared to the gradient descent algorithm: Replace the true gradient $\mathbb{E}\left[\nabla_w f\left(w_k, X\right)\right]$ by the stochastic gradient $\nabla_w f\left(w_k, x_k\right)$. </p>
</li>
<li><p>Compared to the batch gradient descent method: let $n=1$.</p>
</li>
<li><p><strong>From GD to SGD</strong>: The stochastic gradient $\nabla_w f\left(w_k, x_k\right)$ can be viewed as a noisy measurement of the true gradient $\mathbb{E}\left[\nabla_w f(w, X)\right]$: </p>
</li>
</ol>
<script type="math/tex; mode=display">
\nabla_w f\left(w_k, x_k\right)=\mathbb{E}\left[\nabla_w f(w, X)\right]+\underbrace{\nabla_w f\left(w_k, x_k\right)-\mathbb{E}\left[\nabla_w f(w, X)\right]}_\eta .</script><script type="math/tex; mode=display">
\begin{aligned} 
\mathbb{E}(\eta) & =\mathbb{E}(\nabla_w f\left(w_k, x_k\right)-\mathbb{E}\left[\nabla_w f(w, X)\right])\\
& =\mathbb{E}_{x_k}[\nabla_w f\left(w_k, x_k\right)]-\mathbb{E}_X\left[\nabla_w f(w, X)\right]=0
\end{aligned}</script><hr>
]]></content>
  </entry>
  <entry>
    <title>如何优雅的使用 Word 进行论文书写（初级版）</title>
    <url>/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1-多级标题的设置"><a href="#1-多级标题的设置" class="headerlink" title="1. 多级标题的设置"></a>1. 多级标题的设置</h1><blockquote>
<p>构建一个视觉舒服且直观的大纲列表对于开始论文的书写显得格外的重要。而word默认给出的标题样式模板对于书写论文来说太疏松了。本节主要介绍如何自定义一套适合自己的word标题模板。<br>如果对各级标题进行逐个格式化，并为其手动添加序号（如1.1 |第1.1章|第一章 等）就显得不够优雅。有没有一种方式能让我们就像书写markdown一样更加的丝滑那？</p>
</blockquote>
<p>首先，我们新建一个word 对 <code>开始</code>→<code>样式</code>中的我们所预想的格式、字体大小、段落间距等进行预设。<br><strong>主要涉及正文以及标题、1，2，3级标题</strong></p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/titletype.jpg" width="80%" height="50%"></div>


<p><strong>注意</strong> :记着更改各级标题时,每个都要勾选基于该模板的新文档，这样下次新建 word 时直接使用已经更改好的模板即可。</p>
<p><strong>然后就是为各级标题添加序号</strong></p>
<p>进入：<code>开始</code>→<code>多级序号</code>→<code>定义新的多级列表</code> 按需求进行设置即可:</p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/title.NO.jpg" width="80%" height="50%"></div>

<p><strong>注意</strong> ：为各级标题添加了序号后，实际是把标题样式进行了更新，所以完成编号后需要再次为每个标题进行勾选基于该模板的新文档，不需要改动别的什么直接按  <code>确定</code> 即可，这样下次新建 word 时直接使用已经更改好的带编号的模板了。</p>
<hr>
<h1 id="2-图、表的插入与索引"><a href="#2-图、表的插入与索引" class="headerlink" title="2.图、表的插入与索引"></a>2.图、表的插入与索引</h1><h2 id="2-1-图的题注插入"><a href="#2-1-图的题注插入" class="headerlink" title="2.1 图的题注插入"></a>2.1 图的题注插入</h2><p><strong><em>这一步的前提是 你的标题编号是按上述形式插入的,而非手动写的。这样 word 才能识别你的编号从而插入题注里</em></strong><br>插入图片后  一般选用嵌入式（默认） 右键后选自 <code>插入题注</code> 比如我们想要 <code>图 1.1</code> 新建标签 <code>图</code> 选择编号的格式。示例如下：</p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/Fig.jpg  " width="60%" height="50%"></div>

<p>设置好后  在为接下来的插入的图进行题注时 word 会自动识别其应该是<strong>图5还是图6</strong>。无需你在考虑图几，你仅需要输入图的名字即可。</p>
<h2 id="2-2-三线表的插入"><a href="#2-2-三线表的插入" class="headerlink" title="2.2 三线表的插入"></a>2.2 三线表的插入</h2><p>首选插入一个表 然后再 <code>表格样式里选择新建表格样式</code>然后进行如下操作 </p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/table.jpg" width="60%" height="50%"></div>

<p><strong>注意：</strong> <em>记着要勾选基于该模板的新文档，这样下次新建时直接使用已经更改好的三线表了。<br>如果更改后发现没有找到 保存并退出 word 然后重新打开即可看到三线表出现在表格样式里。同样的方法进行表的题注的插入</em></p>
<h2 id="2-3-正文中索引图、表"><a href="#2-3-正文中索引图、表" class="headerlink" title="2.3 正文中索引图、表"></a>2.3 正文中索引图、表</h2><p>选择要插入的位置，点击功能栏 <code>插入下的交叉引用</code> 可进行如图操作</p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/index.jpg" width="60%" height="50%"></div>

<p> <strong>注：</strong> <em>当我们插入新图后，图的序号发生改变但是插入正文中的索引未变 ，不要慌 此时我能只需要更新插入引用的域即可 全选后按F9 更新全文的域</em></p>
<hr>
<h1 id="3-MathType-的编号、索引"><a href="#3-MathType-的编号、索引" class="headerlink" title="3. MathType 的编号、索引"></a>3. MathType 的编号、索引</h1><p>目前仅可以逐项公式的编号，即点击 <code>MathType下的右编号</code>在弹出的编辑器里输入公式 会自动的公式居中以及右侧编号。(目前还没有找到为已存在的公式进行编号的方法)</p>
<p>编号的格式可以在 <code>插入编号--格式化</code>里进行更改，选用带章节不带章节的格式以及采用何种连字符等<br>正文索引是也较为方便 点击 <code>插入引用后双击公式编号即可</code>  当你删除公式时编号会自动的更新。</p>
<p>公式的批量大小设置 在编辑器对公式的大小进行定义后</p>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/mathtypesize.jpg" width="70%" height="50%"></div>
<div align="center"><img src="/2023/12/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-Word-%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E4%B9%A6%E5%86%99%EF%BC%88%E5%88%9D%E7%BA%A7%E7%89%88%EF%BC%89/mathtypesize2.jpg" width="70%" height="50%"></div>


<h1 id="4-EndNote-的使用（中英文献混排）"><a href="#4-EndNote-的使用（中英文献混排）" class="headerlink" title="4. EndNote 的使用（中英文献混排）"></a>4. EndNote 的使用（中英文献混排）</h1><ol>
<li><p>去除endnotes 中的域 （不让其跳转，使之固定以便修改参考文献格式）<br>去除word中因使用mendeley或endnote等文献管理软件而产生的域代码。<br>%CTRL+A 全选文章；<br>%CTRL+6 去除全文域代码。</p>
</li>
<li><p>使用：CTRL+SHIFT+F9（Fn+F9）：去除选中的单个域代码，注不能跨页，有时候多选时也可能不生效，所以当参考文献留一篇索引版  ，然后边选中边去除域，去除完毕后 复制一份参考文献，然后更新参考目录  应为空才算去除完全，把刚刚复制的粘贴上，修改格式。</p>
</li>
</ol>
<p><strong>注意:</strong> 中途不能更新参考目录  ，如果更新了会将未去除域的参考文献索引重新编排。</p>
<p><strong>参考源</strong><br><a href="https://www.bilibili.com/video/BV1E5411K7By/?spm_id_from=333.788&amp;vd_source=49b8bd33ca1c49c048c6fc297b7c91d2">1.优雅搞定Word论文排版—b站视频</a></p>
<p><a href="https://www.bilibili.com/video/BV1rr4y1T71y?spm_id_from=333.999.0.0&amp;vd_source=49b8bd33ca1c49c048c6fc297b7c91d2">2.EndNote中英文文献混排格式设置—b站视频</a></p>
]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Welcome To My Academic Homepage</title>
    <url>/index.html</url>
    <content><![CDATA[<h1 id="News-boom"><a href="#News-boom" class="headerlink" title="News(:boom:)"></a>News(<span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</h1><div class="note danger">
            <ul><li><font color="blue">2024. 04</font> — My paper has been accepted by <em>IEEE TFS</em>.<br><font size="3"><b>Paper cite</b>: <b>M. Huang</b>, S. Huang, B. Du*, J. Guo and Y. Li. Fuzzy Superposition Operation and Knowledge-driven Co-evolutionary Algorithm for Integrated Production Scheduling and Vehicle Routing Problem with Soft Time Windows and Fuzzy Travel Times. <em>IEEE Transactions on Fuzzy Systems</em>, doi: 10.1109/TFUZZ.2024.3388003.（SCI Q1 , IF 11.9, TOP）</font><br><a href="https://ieeexplore.ieee.org/document/10497842"> (Paper) </a> <strong><code>PDF</code></strong> ; <a href="../zip/KDCEA-Code.zip"> (KDCEA) </a> <strong><code>Matlab code</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-Dateset.zip">(IPSVRP-STW&amp;FTT Dateset)</a> <strong><code>.zip</code></strong>;<a href="../zip/IPSVRP-STW-FTT-AMPL.zip"> (AMPL) </a> <strong><code>.mod</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-CASE.zip">(CASE)</a> <strong><code>.zip</code></strong></li></ul>
          </div>
<div class="note danger">
            <ul><li><font color="blue">2023. 11</font> “Huawei Cup” The 20th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Research on Optimization of Evaluation Plans for Large scale Innovation Competitions </li></ul>
          </div>
<hr>
<h1 id="Biography"><a href="#Biography" class="headerlink" title="Biography"></a>Biography</h1><p>Ming Huang was born in Xingtai, Hebei Province, China in 1999. Currently, I am pursuing a doctoral degree in Mechanical Engineering at Beijing Institute of Technology.</p>
<p>If you have any further questions, please feel free to contact me.<br>My E-mail（ <span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ）： huangming @bit.edu.cn.<br>Address：School of Mechanical Engineering, Beijing Institute of Technology, Beijing  100081, China </p>
<!-- 让表格居中显示的风格 -->
<style>
.center 
{
  display: table;
  margin-left: 0px;
  margin-right: 0px;
}
table th:first-of-type {
    width: 420pt;
}
table th:nth-of-type(2) {
    width: 640pt;
}
</style>

<div class="center">

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   Interests</th>
<th style="text-align:left"><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   Education</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><li><b>Deep reinforcement learning, Evolutionary computing，LLM</b></li><li> <b>Robotic swarm scheduling</b> </li><li><b>Human-Robot Collaboration Optimization</b></li><li>Multi-stage integrated scheduling</li><li>Complex System Modeling and Optimization</li><li>Dynamic multi-objective optimization</li></td>
<td style="text-align:left"><li><b>2023. 09 - 2027. 07 D.Eng in Mechanical Engineering-- Beijing Institute of Technology</b></li><li>2020. 09 - 2023. 07 M.Eng. in Industrial Engineering-- Wuhan University of Technology</li><li>2016. 09 - 2020. 07 B.Eng. in Quality Management Engineering-- He Bei University </li><li>2013. 09 - 2016. 07 Student in the first senior high school of Xingtai City, Hebei</li></td>
</tr>
</tbody>
</table>
</div>
<div class="tabs" id="yearlist"><ul class="nav-tabs"><li class="tab"><a href="#yearlist-1">2023 YearList <span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a></li><li class="tab active"><a href="#yearlist-2">2024 YearList <span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a></li></ul><div class="tab-content"><div class="tab-pane" id="yearlist-1"><p><strong>2023 To Do list <span class="github-emoji"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></strong><br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Going to pass the PhD application examination<br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Getting a Master’s Degree:<br><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Acceptance of three papers or more（Progress: 2/3）<br><span class="github-emoji"><span>✖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Go to improve English listening skills<br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> To control the weight between 55-60kg, a strong body is the basis of scientific research.<br><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Go save up money because maybe try hair transplants to fight hair loss.<br><strong><em>Words I Wanted To Say：There are many things worth doing in one’s life, and the most significant is to do it right now.<span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></em></strong></p></div><div class="tab-pane active" id="yearlist-2"><!--**2024 To Do list :dart:**
:black_square_button: Acceptance of three papers or more :memo:（Progress: 1/3）
:black_square_button: Read three literary novels :books:（Progress: 0/3）
:black_square_button: Improvement of English listening and communication skills :earth_americas: 
:black_square_button: Keep your weight between 55-60kg, and don't let abdominal muscles disappear! :muscle:
:black_square_button: Time into 25 minutes for a 5k run :running:
:black_square_button: To save 30,000 yuan and become financially independent. :moneybag:
***Words I Wanted To Say：The goal of life should not be success and fame, but rather to live your life the way you want.:low_brightness:***--></div></div></div>
<hr>
<h1 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h1><ul>
<li><a href="https://me.bit.edu.cn/szdw/jsml/zzgcx/gygcyjs/sssds13/13ddf65bcbdf4f5c83acd440457ee9de.htm"><strong>Sihan Huang</strong></a> associate professor（My doctoral  supervisor）<br><br></li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201901/t20190103_351115.shtml"><strong>Baigang Du</strong></a> associate professor（My master’s supervisor）<br><br></li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201510/t20151014_200361.shtml"><strong>Jun Guo</strong></a> associate professor（My associate master’s supervisor）</li>
</ul>
<hr>
<h1 id="Awards"><a href="#Awards" class="headerlink" title="Awards"></a>Awards</h1><!-- 标签形式 -->
<div class="note info">
            <ul><li><font color="blue">2023. 11</font> “Huawei Cup” The 20th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Research on Optimization of Evaluation Plans for Large scale Innovation Competitions </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2023. 06</font> Outstanding graduate of Wuhan University of Technology — <strong>Personal Honor</strong> </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2022. 12</font> “Huawei Cup” The 19th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Scheduling optimization problem for automotive manufacturing painting-final assembly cache sequencing zone </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2022. 06</font> The 12th Wuhan University of Technology Post-graduate Mathematical Contest  — <strong>First Prize</strong><br>Modeling topic: Research on resource-constrained vehicle routing problem </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2021. 12</font> “Huawei Cup” The 18th China Post-granduate Mathematical Contest — <strong>Third Prize</strong><br>Modeling topic: Airline crew optimization scheduling problem </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2021. 01</font> “Cloud Talk New Technology” Popular Science Contest— <strong>Third Prize</strong><br>Entry: OpenCV-based smart power plant inspection trolley </li></ul>
          </div>
<hr>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><h3 id="Fund"><a href="#Fund" class="headerlink" title="Fund"></a>Fund</h3><div class="note warning">
            <ol><li>Independent Innovation Foundation of Wuhan University of Technology —— Postgraduate Personal Exploration Project :<br>Research on Integrated  Production and Distribution Scheduling with Flexible Batching and Soft Time Windows<br><font color="blue">2022. 01-2022. 12</font>（<strong>Project Principals</strong>）</li></ol>
          </div>
<div class="note warning">
            <ol><li>National Natural Science Foundation of China (Youth Fund) ：<br>A game method of supply and demand allocation of complex product system manufacturing services for social collaboration<br><font color="blue">2018. 01-2020. 12 </font>（<strong>Project Participants</strong>）</li></ol>
          </div>
<h3 id="Internship"><a href="#Internship" class="headerlink" title="Internship"></a>Internship</h3><div class="note warning">
            <h4 id="—-2021-07-2022-07-Tuoxing-Zhiwang-Technology-Co-Ltd-Wuhan-（Java-Back-End-Development）"><a href="#—-2021-07-2022-07-Tuoxing-Zhiwang-Technology-Co-Ltd-Wuhan-（Java-Back-End-Development）" class="headerlink" title="— 2021. 07-2022. 07 Tuoxing Zhiwang Technology Co., Ltd.  Wuhan （Java Back End Development）"></a>— 2021. 07-2022. 07 <a href="http://www.tonshinet.com/">Tuoxing Zhiwang Technology Co., Ltd.  Wuhan</a> （Java Back End Development）</h4><ol><li><p><font color="blue">2021. 07-2021. 12 </font> Development of Wind Plant Operation and Maintenance Application Platform</p></li><li><p><font color="blue">2022. 01-2022. 07 </font> Tangshan Sinoma Heavy Machinery PMS Improvement Project<br>-Development of External Supplier Price Comparison Management Platform </p></li></ol>
          </div>
<p><a href="https://clustrmaps.com/site/1bqdf" title="Visit tracker"><img src="//clustrmaps.com/map_v2.png?cl=555555&amp;w=500&amp;t=m&amp;d=lPGunm_IA1w4rADFSr_XZ_r1KQCj0GoM-18qXvbMs1E&amp;co=ffffff&amp;ct=555555"></a></p>
</div>]]></content>
  </entry>
  <entry>
    <title>Welcome To My Academic Homepage</title>
    <url>/home/index.html</url>
    <content><![CDATA[<h1 id="News-boom"><a href="#News-boom" class="headerlink" title="News(:boom:)"></a>News(<span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</h1><div class="note danger">
            <ul><li><font color="blue">2024. 04</font> — My paper has been accepted by <em>IEEE TFS</em>.<br><font size="3"><b>Paper cite</b>: <b>M. Huang</b>, S. Huang, B. Du*, J. Guo and Y. Li. Fuzzy Superposition Operation and Knowledge-driven Co-evolutionary Algorithm for Integrated Production Scheduling and Vehicle Routing Problem with Soft Time Windows and Fuzzy Travel Times. <em>IEEE Transactions on Fuzzy Systems</em>, doi: 10.1109/TFUZZ.2024.3388003.（SCI Q1 , IF 11.9, TOP）</font><br><a href="https://ieeexplore.ieee.org/document/10497842"> (Paper) </a> <strong><code>PDF</code></strong> ; <a href="../zip/KDCEA-Code.zip"> (KDCEA) </a> <strong><code>Matlab code</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-Dateset.zip">(IPSVRP-STW&amp;FTT Dateset)</a> <strong><code>.zip</code></strong>;<a href="../zip/IPSVRP-STW-FTT-AMPL.zip"> (AMPL) </a> <strong><code>.mod</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-CASE.zip">(CASE)</a> <strong><code>.zip</code></strong></li></ul>
          </div>
<div class="note danger">
            <ul><li><font color="blue">2023. 11</font> “Huawei Cup” The 20th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Research on Optimization of Evaluation Plans for Large scale Innovation Competitions </li></ul>
          </div>
<hr>
<h1 id="Biography"><a href="#Biography" class="headerlink" title="Biography"></a>Biography</h1><p>Ming Huang was born in Xingtai, Hebei Province, China in 1999. Currently, I am pursuing a doctoral degree in Mechanical Engineering at Beijing Institute of Technology.<br>If you have any further questions, please feel free to contact me.<br>My E-mail（ <span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ）： huangming @bit.edu.cn.<br>Address：School of Mechanical Engineering, Beijing Institute of Technology, Beijing  100081, China </p>
<!-- 让表格居中显示的风格 -->
<style>
.center 
{
  display: table;
  margin-left: 0px;
  margin-right: 0px;
}
table th:first-of-type {
    width: 420pt;
}
table th:nth-of-type(2) {
    width: 640pt;
}
</style>

<div class="center">

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   Interests</th>
<th style="text-align:left"><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>   Education</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><li><b>Deep reinforcement learning, Evolutionary computing，LLM</b></li><li> <b>Robotic swarm scheduling</b> </li><li><b>Human-Robot Collaboration Optimization</b></li><li>Multi-stage integrated scheduling</li><li>Complex System Modeling and Optimization</li><li>Dynamic multi-objective optimization</li></td>
<td style="text-align:left"><li><b>2023. 09 - 2027. 07 D.Eng in Mechanical Engineering-- Beijing Institute of Technology</b></li><li>2020. 09 - 2023. 07 M.Eng. in Industrial Engineering-- Wuhan University of Technology</li><li>2016. 09 - 2020. 07 B.Eng. in Quality Management Engineering-- He Bei University </li><li>2013. 09 - 2016. 07 Student in the first senior high school of Xingtai City, Hebei</li></td>
</tr>
</tbody>
</table>
</div>
<div class="tabs" id="yearlist"><ul class="nav-tabs"><li class="tab"><a href="#yearlist-1">2023 YearList <span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a></li><li class="tab active"><a href="#yearlist-2">2024 YearList <span class="github-emoji"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a></li></ul><div class="tab-content"><div class="tab-pane" id="yearlist-1"><p><strong>2023 To Do list <span class="github-emoji"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></strong><br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Going to pass the PhD application examination<br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Getting a Master’s Degree:<br><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Acceptance of three papers or more（Progress: 2/3）<br><span class="github-emoji"><span>✖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Go to improve English listening skills<br><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> To control the weight between 55-60kg, a strong body is the basis of scientific research.<br><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Go save up money because maybe try hair transplants to fight hair loss.<br><strong><em>Words I Wanted To Say：There are many things worth doing in one’s life, and the most significant is to do it right now.<span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></em></strong></p></div><div class="tab-pane active" id="yearlist-2"><p><strong>2024 To Do list <span class="github-emoji"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></strong><br><!--:black_square_button: Acceptance of three papers or more :memo:（Progress: 0/3）
:black_square_button: Read three literary novels :books:（Progress: 0/3）
:black_square_button: Improvement of English listening and communication skills :earth_americas: 
:black_square_button: Keep your weight between 55-60kg, and don't let abdominal muscles disappear! :muscle:
:black_square_button: Time into 25 minutes for a 5k run :running:
:black_square_button: To save 30,000 yuan and become financially independent. :moneybag:
***Words I Wanted To Say：The goal of life should not be success and fame, but rather to live your life the way you want.:low_brightness:*** 
--></p></div></div></div>
<hr>
<h1 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h1><ul>
<li><a href="https://me.bit.edu.cn/szdw/jsml/zzgcx/gygcyjs/sssds13/13ddf65bcbdf4f5c83acd440457ee9de.htm"><strong>Sihan Huang</strong></a> associate professor（My doctoral  supervisor）<br><br></li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201901/t20190103_351115.shtml"><strong>Baigang Du</strong></a> associate professor（My master’s supervisor）<br><br></li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201510/t20151014_200361.shtml"><strong>Jun Guo</strong></a> associate professor（My associate master’s supervisor）</li>
</ul>
<hr>
<h1 id="Awards"><a href="#Awards" class="headerlink" title="Awards"></a>Awards</h1><!-- 标签形式 -->
<div class="note info">
            <ul><li><font color="blue">2023. 11</font> “Huawei Cup” The 20th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Research on Optimization of Evaluation Plans for Large scale Innovation Competitions </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2023. 06</font> Outstanding graduate of Wuhan University of Technology — <strong>Personal Honor</strong> </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2022. 12</font> “Huawei Cup” The 19th China Post-granduate Mathematical Contest — <strong>Second Prize</strong><br>Modeling topic: Scheduling optimization problem for automotive manufacturing painting-final assembly cache sequencing zone </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2022. 06</font> The 12th Wuhan University of Technology Post-graduate Mathematical Contest  — <strong>First Prize</strong><br>Modeling topic: Research on resource-constrained vehicle routing problem </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2021. 12</font> “Huawei Cup” The 18th China Post-granduate Mathematical Contest — <strong>Third Prize</strong><br>Modeling topic: Airline crew optimization scheduling problem </li></ul>
          </div>
<div class="note info">
            <ul><li><font color="blue">2021. 01</font> “Cloud Talk New Technology” Popular Science Contest— <strong>Third Prize</strong><br>Entry: OpenCV-based smart power plant inspection trolley </li></ul>
          </div>
<hr>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><h3 id="Fund"><a href="#Fund" class="headerlink" title="Fund"></a>Fund</h3><div class="note warning">
            <ol><li>Independent Innovation Foundation of Wuhan University of Technology —— Postgraduate Personal Exploration Project :<br>Research on Integrated  Production and Distribution Scheduling with Flexible Batching and Soft Time Windows<br><font color="blue">2022. 01-2022. 12</font>（<strong>Project Principals</strong>）</li></ol>
          </div>
<div class="note warning">
            <ol><li>National Natural Science Foundation of China (Youth Fund) ：<br>A game method of supply and demand allocation of complex product system manufacturing services for social collaboration<br><font color="blue">2018. 01-2020. 12 </font>（<strong>Project Participants</strong>）</li></ol>
          </div>
<h3 id="Internship"><a href="#Internship" class="headerlink" title="Internship"></a>Internship</h3><div class="note warning">
            <h4 id="—-2021-07-2022-07-Tuoxing-Zhiwang-Technology-Co-Ltd-Wuhan-（Java-Back-End-Development）"><a href="#—-2021-07-2022-07-Tuoxing-Zhiwang-Technology-Co-Ltd-Wuhan-（Java-Back-End-Development）" class="headerlink" title="— 2021. 07-2022. 07 Tuoxing Zhiwang Technology Co., Ltd.  Wuhan （Java Back End Development）"></a>— 2021. 07-2022. 07 <a href="http://www.tonshinet.com/">Tuoxing Zhiwang Technology Co., Ltd.  Wuhan</a> （Java Back End Development）</h4><ol><li><p><font color="blue">2021. 07-2021. 12 </font> Development of Wind Plant Operation and Maintenance Application Platform</p></li><li><p><font color="blue">2022. 01-2022. 07 </font> Tangshan Sinoma Heavy Machinery PMS Improvement Project<br>-Development of External Supplier Price Comparison Management Platform </p></li></ol>
          </div>
<p><a href="https://clustrmaps.com/site/1bqdf" title="Visit tracker"><img src="//clustrmaps.com/map_v2.png?cl=555555&amp;w=500&amp;t=m&amp;d=lPGunm_IA1w4rADFSr_XZ_r1KQCj0GoM-18qXvbMs1E&amp;co=ffffff&amp;ct=555555"></a></p>
</div>]]></content>
  </entry>
  <entry>
    <title>Scholars Link</title>
    <url>/link/index.html</url>
    <content><![CDATA[<h3 id="Smart-Manufacturing-Operations-Research"><a href="#Smart-Manufacturing-Operations-Research" class="headerlink" title="Smart Manufacturing &amp; Operations Research"></a><p align="center"><font face="TIME NEW ROMANS" size="5" color="black">Smart Manufacturing &amp; Operations Research</font></p></h3><h5 id="Digital-Twin-amp-Human-Centric-Smart-Manufacturing"><a href="#Digital-Twin-amp-Human-Centric-Smart-Manufacturing" class="headerlink" title="Digital Twin &amp; Human Centric Smart Manufacturing"></a>Digital Twin &amp; Human Centric Smart Manufacturing</h5><ul>
<li><a href="https://www.kth.se/profile/lihuiw/"><strong>Lihui Wang</strong></a>（KTH Royal Institute of Technology-Industrial Production System）</li>
<li><a href="https://shi.buaa.edu.cn/taofei/zh_CN/index.htm"><strong>Fei Tao</strong></a>（Beihang University-Institute of Science and Technology）</li>
<li><a href="https://me.bit.edu.cn/szdw/jsml/zzgcx/gygcyjs/sssds13/13ddf65bcbdf4f5c83acd440457ee9de.htm"><strong>Sihan Huang</strong></a>（Beijing Institute of Technology - School of Mechanical Engineering）</li>
<li><a href="https://person.zju.edu.cn/baicun#949984"><strong>Baicun Wang</strong></a>（Zhejiang University - School of Mechanical Engineering）<h5 id="Shop-Scheduling"><a href="#Shop-Scheduling" class="headerlink" title="Shop Scheduling"></a>Shop Scheduling</h5></li>
<li><a href="https://www.au.tsinghua.edu.cn/info/1107/1558.htm"><strong>Ling Wang</strong></a>（Tsinghua University-Department of Automation）</li>
<li><a href="http://mse.hust.edu.cn/info/1143/1387.htm"><strong>Liang Gao</strong></a>（Huazhong University of Science and Technology - School of Mechanical Science &amp; Engineering）</li>
<li><a href="http://sa.whut.edu.cn/yjspy/dsdw/201902/t20190225_353630.shtml"><strong>Deming Lei</strong></a>（Wuhan University of Technology - School of Automation）</li>
<li><a href="http://ischedulings.com/project.html"><strong>Junqing Li</strong></a>（Liaocheng University - School of Computer Science）</li>
<li><a href="https://scholar.must.edu.mo/scholar/100666"><strong>Kaizhou Gao</strong></a>（Macau University of Science and Technology - Institute of Systems Engineering）<h5 id="Integrated-Scheduling-amp-Vehicle-Routing"><a href="#Integrated-Scheduling-amp-Vehicle-Routing" class="headerlink" title="Integrated Scheduling &amp; Vehicle Routing"></a>Integrated Scheduling &amp; Vehicle Routing</h5></li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201901/t20190103_351115.shtml"><strong>Baigang Du</strong></a>（Wuhan University of Technology - School of Mechanical and Electrical Engineering）</li>
<li><a href="https://bs.scu.edu.cn/gongye/201904/5178.html"><strong>Dujuan Wang</strong></a>（Sichuan University-Business School）</li>
<li><a href="http://bs.scu.edu.cn/gongye/201904/5203.html"><strong>Zhaoxia Guo</strong></a>（Sichuan University - School of Business）</li>
<li><a href="http://ems.whu.edu.cn/info/1718/10649.htm"><strong>Kai Wang</strong></a>（Wuhan University-School of Economics and Management）</li>
<li><a href="http://cm.hust.edu.cn/info/1745/24587.htm"><strong>Hu Qin</strong></a>（Huazhong University of Science and Technology-School of Management）</li>
<li><a href="http://cm.hust.edu.cn/info/1746/24605.htm"><strong>Kunpeng Li</strong></a>（Huazhong University of Science and Technology-School of Management）</li>
<li><a href="https://gr.xjtu.edu.cn/web/ya.liu/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B"><strong>Ya Liu</strong></a>（Xi’an Jiaotong University-School of Management）</li>
<li><a href="http://faculty.hfut.edu.cn/~ZNBjIb/zh_CN/index.htm"><strong>Bayi Cheng</strong></a>（Hefei University of Technology-School of Management）</li>
</ul>
<h5 id="Resource-and-Project-Scheduling"><a href="#Resource-and-Project-Scheduling" class="headerlink" title="Resource and Project Scheduling"></a>Resource and Project Scheduling</h5><ul>
<li><a href="http://202.118.1.237/sxliu/index.html"><strong>Shixin Liu</strong></a>（Northeastern University - School of Information Science and Engineering）</li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201506/t20150602_169283.shtml"><strong>Yibing Li</strong></a>（Wuhan University of Technology - School of Mechanical and Electrical Engineering） <h5 id="Disassembly-Line-Balancing-Assembly-Line-Scheduling"><a href="#Disassembly-Line-Balancing-Assembly-Line-Scheduling" class="headerlink" title="Disassembly Line Balancing, Assembly Line Scheduling"></a>Disassembly Line Balancing, Assembly Line Scheduling</h5></li>
<li><a href="https://faculty.swjtu.edu.cn/zhangzeqiang/zh_CN/index/97881/list/index.htm"><strong>Zeqiang Zhang</strong></a>（Southwest Jiaotong University-School of Mechanical Engineering）</li>
<li><a href="http://smee.whut.edu.cn/rsgz/szdw/201510/t20151014_200361.shtml"><strong>Jun Guo</strong></a>（Wuhan University of Technology - School of Mechanical and Electrical Engineering）</li>
</ul>
<h3 id="Evolutionary-Computation"><a href="#Evolutionary-Computation" class="headerlink" title="Evolutionary Computation"></a><p align="center"><font face="TIME NEW ROMANS" size="5" color="black">Evolutionary Computation</font></p></h3><ul>
<li><a href="https://www.egr.msu.edu/~kdeb/index.shtml"><strong>Kalyanmoy Deb</strong></a>（<a href="https://www.egr.msu.edu/~kdeb/codes.shtml">NSGA-II</a>）</li>
<li><a href="https://www.surrey.ac.uk/people/yaochu-jin#publications"><strong>Yaochu Jin</strong></a>（Westlake University, China; University of Surrey, UK）</li>
<li><a href="https://www.cs.cityu.edu.hk/~qzhan7/index.html"><strong>Qingfu Zhang</strong></a>（MOEA/D City University of Hong Kong - Department of Computer Science）</li>
<li><a href="http://wky.ahu.edu.cn/2022/0301/c13481a280306/page.htm"><strong>Ye Tian</strong></a>（<a href="https://github.com/BIMK/PlatEMO">platEMO</a> Anhui University）</li>
<li><strong>Handing Wang</strong>（Xidian University）<h3 id="Related-Academic-Links"><a href="#Related-Academic-Links" class="headerlink" title="Related Academic Links"></a><p align="center"><font face="TIME NEW ROMANS" size="5" color="black">Related Academic Links</font></p></h3></li>
<li><a href="https://cuglirui.github.io/index.html"><strong>Rui Li</strong></a> (Flexible job shop scheduling <a href="https://cuglirui.github.io/downloads.htm">FJSP</a> <code>matlab</code>)</li>
<li><a href="https://github.com/dengfaheng"><strong>Faheng Deng</strong></a> (Vehicle routing problem <a href="https://github.com/dengfaheng">VRP，TSP</a> <code>java</code>)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Datasets and Algorithm Codes</title>
    <url>/resources/index.html</url>
    <content><![CDATA[<h1 id="Datesets"><a href="#Datesets" class="headerlink" title="Datesets"></a>Datesets</h1><h4 id="1-Integrated-Production-and-Distribution-Scheduling-Problem-IPDS"><a href="#1-Integrated-Production-and-Distribution-Scheduling-Problem-IPDS" class="headerlink" title="1. Integrated Production and Distribution Scheduling Problem(IPDS)"></a>1. Integrated Production and Distribution Scheduling Problem(IPDS)</h4><p><font color="#428BCA" size="5"><strong>Original Intention</strong></font>:<br>IPDS involves the optimization of production scheduling and distribution scheduling. Individually, production scheduling or distribution scheduling has been studied for a long time and has rich benchmark datasets and excellent solution algorithms. <strong>However, there is a paucity of benchmark datasets in IPDS studies.</strong> Due to the complexity and specificity of the problem, most studies have adopted randomly generated (or partially randomly generated) datasets for computational experiments, but few studies have published their test datasets for use and validation by other researchers. In order to provide a uniform benchmark for evaluating and measuring the performance of algorithms for the same and similar studies, we publish the used datasets and algorithms to facilitate the computational experiments of other researchers.</p>
<div class="note info">
            <ul><li><strong>IPSVRP-BM&amp;STW Dateset（<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</strong><br>（Beat Production Lines &amp; Vehicle Routing Problem with Soft Time Window and Heterogeneous vehicles）<br>DataSet：<a href="../zip/IPSVRP-BM-STW-Dateset.zip">IPSVRP-BM&amp;STW Dateset</a><br><a href="../pdf/A%20hybrid%20collaborative%20framework%20for%20integrated%20production%20scheduling%20and%20vehicle%20routing%20problem%20with%20batch%20manufacturing%20and%20soft%20time%20windows.pdf">The paper</a> proposing this dataset<br><a href="link">A blog</a> introducing the formation process of this dataset</li></ul>
          </div>
<div class="note info">
            <ul><li><strong>Fuzzy-IPDS Dateset（<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</strong><br>（Beat Production Lines &amp; Vehicle Routing Problem with Soft Time Window and Heterogeneous vehicles &amp; Fuzzy Travel time）<br>DataSet：<a href="../zip/Fuzzy-IPDS-Dateset.zip">Fuzzy-IPDS Dateset</a><br><a href="link">The paper</a> proposing this dataset<br><a href="link">A blog</a> introducing the formation process of this dataset</li></ul>
          </div>
<div class="note info">
            <ul><li><strong>IPSVRP-STW&amp;FTT Dateset（<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</strong><br>（Beat Production Lines &amp; Soft Time Window &amp; A limited number of Muti-trip Heterogeneous &amp; Fuzzy Travel time）<br>DataSet：<a href="../zip/IPSVRP-STW-FTT-Dateset.zip">IPSVRP-STW&amp;FTT Dateset</a><br><a href="link">The paper</a> proposing this dataset<br><a href="link">A blog</a> introducing the formation process of this dataset</li></ul>
          </div>
<h4 id="2-Datasets-of-other-researchers"><a href="#2-Datasets-of-other-researchers" class="headerlink" title="2. Datasets of other researchers"></a>2. Datasets of other researchers</h4><ul>
<li><p>VRPTW Datesets: <strong><a href="https://www.sintef.no/projectweb/top/vrptw/">Solomon-Benchmark</a></strong></p>
</li>
<li><p>VRP Datesets: <strong><a href="https://neo.lcc.uma.es/vrp/vrp-instances/">Vrp-Instances</a></strong></p>
</li>
<li><p>Test datasets based on problem instances: <strong><a href="http://people.brunel.ac.uk/~mastjjb/jeb/info.html">OR-Library by J E Beasley</a></strong></p>
</li>
</ul>
<hr>
<h1 id="Algorithm-Code"><a href="#Algorithm-Code" class="headerlink" title="Algorithm Code"></a>Algorithm Code</h1><div class="note info">
            <ol><li><a href="link"> HCF-IMOEA </a> <strong><code>Matlab code</code></strong> （<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）<br><a href="https://www.sciencedirect.com/science/article/pii/S0305054823002101">This paper</a> <strong><code>HTML</code></strong> proposing this algorithm</li></ol>
          </div>
<div class="note info">
            <ol><li><a href="../zip/NSGA-II-AVNS-Code.zip"> NSGA-II-AVNS </a> <strong><code>Matlab code</code></strong> （<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）<br><a href="https://kns.cnki.net/kcms2/article/abstract?v=xNq_RSSxttstktCq-VWRIQS1e6fIAq26YV2DyMFsCVB9NtbxKqFgDZtEE5MiKN1dG5PLmIItcZsrbA9y-tAUQMMLpbYZJEJr4NENoL1ughgxkkSL6gjYdqp7OcHpgSim7TjKF6gvjYE=&amp;uniplatform=NZKPT&amp;language=CHS">This paper</a><strong><code>HTML</code></strong> proposing this algorithm</li></ol>
          </div>
<div class="note info">
            <ol><li><a href="../zip/KDCEA-Code.zip"> KDCEA </a> <strong><code>Matlab code</code></strong> （<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）<br><a href="https://ieeexplore.ieee.org/document/10497842">This paper</a> <strong><code>HTML</code></strong> proposing this algorithm</li></ol>
          </div>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Academic Publications</title>
    <url>/publications/index.html</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Master’s-Thesis"><a href="#Master’s-Thesis" class="headerlink" title="Master’s Thesis"></a>Master’s Thesis</h3><ol><li><strong>Huang, M.</strong>, 2023. Research on integrated production and distribution scheduling for fast moving consumer goods manufacturing enterprise. Wuhan University of Technology.<a href="../pdf/Thesis-快速消费品制造企业生产-配送集成调度研究.pdf"> (Master’s Thesis) </a> <strong><code>PDF</code></strong>;</li></ol>
          </div>
<div class="note success">
            <h3 id="Published-papers"><a href="#Published-papers" class="headerlink" title="Published papers"></a>Published papers</h3><ol><li><p><strong>M. Huang</strong>, S. Huang, B. Du<em>, J. Guo and Y. Li. Fuzzy Superposition Operation and Knowledge-driven Co-evolutionary Algorithm for Integrated Production Scheduling and Vehicle Routing Problem with Soft Time Windows and Fuzzy Travel Times. </em>IEEE Transactions on Fuzzy Systems<em>, 2024, doi: 10.1109/TFUZZ.2024.3388003.（SCI Q1 , IF 11.9, TOP）<br><a href="https://ieeexplore.ieee.org/document/10497842"> (Paper) </a> <strong><code>HTML</code></strong> ; <a href="../zip/KDCEA-Code.zip"> (KDCEA) </a> <strong><code>Matlab code</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-Dateset.zip">(IPSVRP-STW&amp;FTT Dateset)</a> <strong><code>.zip</code></strong>;<a href="../zip/IPSVRP-STW-FTT-AMPL.zip"> (AMPL) </a> <strong><code>.mod</code></strong> ; <a href="../zip/IPSVRP-STW-FTT-CASE.zip">(CASE)</a> <em>*<code>.zip</code></em></em></p></li><li><p><strong>Huang, M.</strong>, Du, B. G., Guo, J<em>. A hybrid collaborative framework for integrated production scheduling and vehicle routing problem with batch manufacturing and soft time windows. </em>Computers &amp; Operations Research<em>, 2023, 159, 106346. <a href="https://doi.org/10.1016/j.cor.2023.106346">https://doi.org/10.1016/j.cor.2023.106346</a> .（SCI Q1 , IF 4.6, ABS-3）<br><a href="https://www.sciencedirect.com/science/article/pii/S0305054823002101"> (Paper) </a> <strong><code>HTML</code></strong>; <a href="link"> (HCF-IMOEA) </a> <strong><code>Matlab code</code></strong> ; <a href="../zip/IPSVRP-BM-STW-Dateset.zip">(IPSVRP-BM&amp;STW Dateset)</a> <em>*<code>.zip</code></em></em></p></li><li><p><strong>Huang, M.</strong>, Du, B. G<em>., Guo, J, Li, Y, B. Integrated  production and distribution scheduling optimization of considering soft time windows and fuzzy travel times. </em>Control Theory and Applications(chinese)<em>, 2023, 40(x): 1–10. DOI: 10.7641/CTA.2023.20920.（EI index，IF:2.781）<br><a href="https://kns.cnki.net/kcms2/article/abstract?v=xNq_RSSxttstktCq-VWRIQS1e6fIAq26YV2DyMFsCVB9NtbxKqFgDZtEE5MiKN1dG5PLmIItcZsrbA9y-tAUQMMLpbYZJEJr4NENoL1ughgxkkSL6gjYdqp7OcHpgSim7TjKF6gvjYE=&amp;uniplatform=NZKPT&amp;language=CHS"> (Paper) </a><strong><code>HTML</code></strong> ; <a href="../zip/NSGA-II-AVNS-Code.zip"> (NSGA-II-AVNS) </a> <strong><code>Matlab code</code></strong> ; <a href="../zip/Fuzzy-IPDS-Dateset.zip">(Fuzzy-IPDS Dateset)</a> <em>*<code>.zip</code></em></em></p></li></ol>
          </div>
<div class="note warning">
            <h3 id="Working-papers"><a href="#Working-papers" class="headerlink" title="Working papers"></a>Working papers</h3><ol><li><p><strong>Ming Huang</strong>, Sihan Huang<em>, Jianpeng Chen, Wei Dong, Baicun Wang, Bing Ruan, Yunpeng Gao, Guoxin Wang, Yan Yan. Dynamic scheduling optimization of island assembly lines under uncertain disturbances by multi-objective deep reinforcement learning </em>JOURNAL OF MECHANICAL ENGINEERING(chinese)<em> <strong>(under review)</strong><br><a href> (Paper) </a><strong><code>HTML</code></strong> ; <a href> (MO-D3QN) </a> <strong><code>python code</code></strong> ; <a href="../zip/IAS-Dataset.zip">(IAS Dateset)</a> <em>*<code>.zip</code></em></em></p></li><li><p><strong>Ming Huang</strong>, Sihan Huang<em>, Bing Ruan, Wei Dong, Jianpeng Chen, Baicun Wang, Baigang Du, Guoxin Wang, Yan Yan, Lihui Wang. A normalized Tchebycheff aggregation based multi-objective deep reinforcement learning for dynamic flexible island assembly line scheduling. </em>ENGINEERING<em> <strong>(under review)</strong><br><a href> (Paper) </a><strong><code>HTML</code></strong> ; <a href> (NT-D3QN) </a> <strong><code>python code</code></strong> ; <a href="../zip/DFIALSP-Dataset.zip">(DFIALSP-Dataset)</a> <strong><code>.zip</code></strong> ; <a href="../zip/DFIALSP-Case.zip">(DFIALSP-Case)</a> <em>*<code>.zip</code></em></em></p></li></ol>
          </div>
<div class="note warning">
            <h3 id="Conference-papers"><a href="#Conference-papers" class="headerlink" title="Conference papers"></a>Conference papers</h3><p align="left"><font face="黑体" size="5" color="blue"></font></p><li><font face="黑体" size="5" color="blue">None </font></li><p></p>
          </div>]]></content>
  </entry>
</search>
